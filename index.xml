<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>備忘録</title>
    <link>https://blog.pokapu.jp/</link>
    <description>Recent content on 備忘録</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <copyright>Copyright © 2022 Hiroki Matsueda</copyright>
    <lastBuildDate>Thu, 30 May 2024 13:37:20 +0900</lastBuildDate>
    <atom:link href="https://blog.pokapu.jp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Keycloakとtraefikを使って認証環境を作る練習</title>
      <link>https://blog.pokapu.jp/post/practice-building-an-authentication-environment/</link>
      <pubDate>Thu, 30 May 2024 13:37:20 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/practice-building-an-authentication-environment/</guid>
      <description>&lt;p&gt;個人的に知識があいまいな認証回りの最小限の知見整理として、Traefik を用いて Keycloak で発行したアクセストークンが無いとアプリケーションにアクセスできないようにする最小限の設定を考えてみました。&lt;/p&gt;&#xA;&lt;p&gt;ちなみに GPT-4o にフォローしてもらって大枠を整理し、動作に不具合が起きた部分を再度調べて…という流れで進めました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;【要注意】&lt;/strong&gt; この手順に従って構成した環境は本番利用するにはセキュリティ面で問題があるので、あくまで Keycloak や Traefik の設定ポイントの参考としてください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;検証した各ミドルウェアのバージョン&#34;&gt;検証した各ミドルウェアのバージョン&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;minikube: v1.33.1&lt;/li&gt;&#xA;&lt;li&gt;Keycloak: 24.0.4&lt;/li&gt;&#xA;&lt;li&gt;Traefik: 2.11.2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;traefik-jwt-plugin: v0.7.1&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;前提条件&#34;&gt;前提条件&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Minikube&lt;/strong&gt; がインストールされている&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;kubectl&lt;/strong&gt; がインストールされている&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Helm&lt;/strong&gt; がインストールされている&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;ステップ-1-minikube-のセットアップ&#34;&gt;ステップ 1: Minikube のセットアップ&lt;/h2&gt;&#xA;&lt;p&gt;まず、Minikube を起動します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ステップ-2-keycloak-のデプロイ&#34;&gt;ステップ 2: Keycloak のデプロイ&lt;/h2&gt;&#xA;&lt;p&gt;Keycloak を最低限の構成でデプロイするために、以下の Kubernetes マニフェストファイルを作成します。&lt;code&gt;keycloak-deployment.yaml&lt;/code&gt;という名前で保存してください。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;quay.io/keycloak/keycloak:24.0.4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;args&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start-dev&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;KEYCLOAK_ADMIN&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;admin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;KEYCLOAK_ADMIN_PASSWORD&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;admin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;KC_PROXY&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;edge&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次に、Keycloak のデプロイメントとサービスを作成します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Managed DiskとAmazon EBSの性能差</title>
      <link>https://blog.pokapu.jp/post/difference-between-azure-disk-and-amazon-ebs-as-i-interpreted-it/</link>
      <pubDate>Mon, 13 May 2024 20:46:57 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/difference-between-azure-disk-and-amazon-ebs-as-i-interpreted-it/</guid>
      <description>&lt;p&gt;AWS の資格勉強をしていて、ディスクの性能が全然違ったので自分なりに整理しました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;azure-managed-disk-の個人的なイメージ&#34;&gt;Azure Managed Disk の個人的なイメージ&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Standard HDD、Standard SSD、Premium SSD が基本的な選択肢&lt;/li&gt;&#xA;&lt;li&gt;Standard SSD と Standard HDD は性能差がそこまで大きくない（IOPS は同じでバーストできる程度）&lt;/li&gt;&#xA;&lt;li&gt;Premium SSD を選択すると、利用可能な IOPS が爆増する&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;amazon-ebs-との比較&#34;&gt;Amazon EBS との比較&lt;/h2&gt;&#xA;&lt;p&gt;対応関係は乱暴に言うと下記のようになります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Standard HDD = st1&lt;/li&gt;&#xA;&lt;li&gt;Standard SSD = gp3&lt;/li&gt;&#xA;&lt;li&gt;Premium SSD = io2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Azure の場合、ディスク容量が 4,096GiB 以下とそれより上で性能の値が全く異なってくるため、下記は 4,096GiB 以下の容量での比較で記載します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;standard-hdd-と-st1-の性能差&#34;&gt;Standard HDD と st1 の性能差&lt;/h3&gt;&#xA;&lt;p&gt;スループットに関して、Standard HDD の場合 60MB/秒 で固定値であるのに対し、st1 の場合は TiB ごとに 40 MiB/秒となっているので、容量に比例したスループットを得られます。&#xA;IOPS はどちらも 500。&lt;/p&gt;&#xA;&lt;p&gt;また AWS の方はアクセス頻度の低いアーカイブ用の sc1 という HDD のディスクがあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>S3上の静的HTMLをカスタムドメインでCloudFrontから配信するサンプル</title>
      <link>https://blog.pokapu.jp/post/aws-cf-s3-terraform-sample/</link>
      <pubDate>Sun, 24 Mar 2024 15:08:17 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/aws-cf-s3-terraform-sample/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;p&gt;AWS の理解向上を兼ねて、CloudFront で S3 上の HTML を配信する構成のサンプルを terraform で構成してみました。&lt;/p&gt;&#xA;&lt;p&gt;AWS Certificate Manager (ACM) で証明書を発行し、CloudFront に割り当てて、カスタムドメインで配信します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;実際のソース&#34;&gt;実際のソース&lt;/h2&gt;&#xA;&lt;p&gt;下記に配置しています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/aws-cf-s3-terraform-sample&#34;&gt;https://github.com/hirokimatsueda/aws-cf-s3-terraform-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;実行時の前提&#34;&gt;実行時の前提&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CloudFront に割り当てる親ドメインを管理する DNS 名前解決が可能な Route 53 がすでに構築されていること&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;実装ポイント&#34;&gt;実装ポイント&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CloudFront の制約上、ACM を us-east-1 に構築する必要があるため、コードの簡素化のため全てのリソースを us-east-1 に構築しています&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;provider&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aws&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;region&lt;/span&gt;     = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;us-east-1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; # CloudFront用のACMの要件に沿って設定&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;access_key&lt;/span&gt; = var.&lt;span style=&#34;color:#a6e22e&#34;&gt;aws_access_key&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;secret_key&lt;/span&gt; = var.&lt;span style=&#34;color:#a6e22e&#34;&gt;aws_secret_key&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;S3 は CloudFront 以外からパブリックなアクセスをさせたくないため、IAM ポリシーを使用して CloudFront のみからアクセス可能にしています&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-terraform&#34; data-lang=&#34;terraform&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aws_iam_policy_document&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;static_site&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;statement&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sid&lt;/span&gt;    = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AllowCloudFront&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;effect&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;principals&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AWS&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;identifiers&lt;/span&gt; = [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        var.&lt;span style=&#34;color:#a6e22e&#34;&gt;cloudfront_origin_access_identity_iam_arn&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;actions&lt;/span&gt; = [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s3:GetObject&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;resources&lt;/span&gt; = [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aws_s3_bucket&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;static_site&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;arn&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/*&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;モジュールを S3 の構築部分と CloudFront ＋ ACM の構築部分で分離していて、こうするとコードの見通しが良いように個人的には思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AKS使いの私がEKS構築でハマったこと</title>
      <link>https://blog.pokapu.jp/post/things-i-failed-at-building-eks-as-an-aks-user/</link>
      <pubDate>Sat, 23 Mar 2024 15:02:22 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/things-i-failed-at-building-eks-as-an-aks-user/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;p&gt;Azure にも AWS にもマネージドな Kubernetes があり、それぞれ Azure Kubernetes Service (AKS) と Amazon Elastic Kubernetes Service (EKS) という名前です。&lt;/p&gt;&#xA;&lt;p&gt;AKS（に限らず Azure のサービス）は、Azure ポータルから構築を進めるとすぐに使えることが多いです。&lt;/p&gt;&#xA;&lt;p&gt;EKS も AKS と同じノリでポータルで構築したらなかなか動かなかったので、ハマったポイントを共有します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ノードグループを追加しないと動かない&#34;&gt;ノードグループを追加しないと動かない&lt;/h2&gt;&#xA;&lt;p&gt;Kubernetes はワーカーノードが無いと Pod を動かすことができません。&lt;/p&gt;&#xA;&lt;p&gt;AKS の場合、ワーカーノードを動かすためにはノードプールを用意する必要があります。&#xA;Azure ポータルから AKS クラスタを構築するときはノードプールの作成がデフォルトで指定されており、更にノードプール（厳密にはシステムモードのノードプール）の作成を指定していないとそもそも AKS 自体を構築できません。&lt;/p&gt;&#xA;&lt;p&gt;これに対して EKS の場合は、AWS コンソールから EKS クラスタを作成しただけではワーカーノードを動かすために必要なノードグループを作成してくれません。&#xA;クラスタはできているので、EKS に対してマニフェストファイルを apply する分には実行できるのですが、待っていても永遠に Pod が立ち上がりません。&lt;/p&gt;&#xA;&lt;h2 id=&#34;永続ボリュームとしての-ebs-のマウントにはアドオンを追加する必要がある&#34;&gt;永続ボリュームとしての EBS のマウントにはアドオンを追加する必要がある&lt;/h2&gt;&#xA;&lt;p&gt;AKS の場合、永続ボリュームとしてマネージドディスクをマウントする場合、StorageClass や Persistent Volume Claim のマニフェストファイルを用意していけば使えるのでアドオンを意識することはありませんでした。&#xA;クラスタの構築時も特にアドオンの選択はさせられません。&lt;/p&gt;&#xA;&lt;p&gt;EKS の場合は、クラスタの構築後にアドオンで EBS CSI driver を追加しないと EBS を永続ボリュームとして利用できません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Application Insightsでお手軽にお安く？HTTP監視しよう</title>
      <link>https://blog.pokapu.jp/post/easy-http-monitoring-with-application-insights/</link>
      <pubDate>Sat, 19 Aug 2023 09:27:34 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/easy-http-monitoring-with-application-insights/</guid>
      <description>&lt;p&gt;皆さんはパブリックに公開したシステムの正常稼働をどのように監視していますか？&lt;/p&gt;&#xA;&lt;p&gt;私は趣味でレンタルサーバーを常時動かしているのですが、HTTP 監視を行い不具合の検出をすぐに行えるようにしています。&lt;/p&gt;&#xA;&lt;p&gt;監視には Azure の Application Insights を利用しており、利用料金も私の使い方であれば格安ですので、こちらをご紹介したいと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;http-監視とは&#34;&gt;HTTP 監視とは？&lt;/h2&gt;&#xA;&lt;p&gt;HTTP 監視とは、監視対象に対して定期的に HTTP のリクエストを送信し、その応答（200 応答するか？など）を確認する監視方法です。&lt;/p&gt;&#xA;&lt;p&gt;サーバー内部の不具合までは見られませんが、サーバーが落ちていないなど、ある程度の正常稼働を認識することができます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;application-insights-による-http-監視&#34;&gt;Application Insights による HTTP 監視&lt;/h2&gt;&#xA;&lt;p&gt;Azure の Application Insights を利用すると、お手軽に HTTP 監視を構成できます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/ja-jp/azure/azure-monitor/app/availability-overview&#34;&gt;可用性テスト&lt;/a&gt;という名称です。&lt;/p&gt;&#xA;&lt;p&gt;Application Insights を構築し、Azure ポータルから「可用性」の画面を開くと設定を追加できます。&lt;/p&gt;&#xA;&lt;p&gt;「クラシックテスト」と「標準テスト」が存在しますが、「標準テスト」で実現することになります。&lt;/p&gt;&#xA;&lt;p&gt;（Azure で「クラシック」と名の付くものは廃止されていく運命にあることが多いです）&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/ja-jp/azure/azure-monitor/app/availability-standard-tests&#34;&gt;標準テストのドキュメント&lt;/a&gt;に沿って設定してみましょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;application-insights-の構築設定時のポイント&#34;&gt;Application Insights の構築・設定時のポイント&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Application Insights の構築時に 2023/08/19 現在は「リソース モード」の選択がありますが、「クラシック」ではなく「ワークスペースベース」を選択します。クラシックは廃止予定の構成です。&lt;/li&gt;&#xA;&lt;li&gt;URL にはポート番号の指定も可能ですので、通常のポート（HTTPS なら 443 とか）以外に対してもテストできます&lt;/li&gt;&#xA;&lt;li&gt;東日本リージョンの Application Insights の場合、&lt;a href=&#34;https://azure.microsoft.com/ja-jp/pricing/details/monitor/#pricing&#34;&gt;テスト 1 回につき &lt;code&gt;$0.0008&lt;/code&gt; のコスト&lt;/a&gt;なので、要件に合わせて「テストの頻度」と「テストの場所」の数を調整しましょう&lt;/li&gt;&#xA;&lt;li&gt;警告を「有効」にして&lt;a href=&#34;https://learn.microsoft.com/ja-jp/azure/azure-monitor/app/availability-alerts&#34;&gt;追加の設定&lt;/a&gt;を入れ込むことで、HTTP 応答に問題があった際にメール通知等ができます&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;趣味程度の使い方の場合の料金は&#34;&gt;趣味程度の使い方の場合の料金は？&lt;/h2&gt;&#xA;&lt;p&gt;趣味程度のサーバーなので、テストの頻度を 15 分毎、テストの場所を Japan East にしていますが、1 日当たり &lt;code&gt;8.90円&lt;/code&gt; (2023/07 実績)となっていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ストレージアカウントのPremiumな選択肢を覚えてみる</title>
      <link>https://blog.pokapu.jp/post/learn-about-premium-options-for-storage-accounts/</link>
      <pubDate>Fri, 28 Jul 2023 09:31:03 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/learn-about-premium-options-for-storage-accounts/</guid>
      <description>&lt;p&gt;皆さん、Azure の Premium なオプションはどれくらい使えていますか？&lt;/p&gt;&#xA;&lt;p&gt;私は WebApps と SQL Database がぱっと頭に浮かびますが、よく考えるといろいろありますよね。&lt;/p&gt;&#xA;&lt;p&gt;Microsoft Learn を参考に、ストレージアカウントの選択可能なオプションを覚えるため整理してみたいと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ストレージ-アカウントの種類&#34;&gt;ストレージ アカウントの種類&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/ja-jp/training/modules/design-data-storage-solution-for-non-relational-data/3-design-for-azure-storage-accounts&#34;&gt;https://learn.microsoft.com/ja-jp/training/modules/design-data-storage-solution-for-non-relational-data/3-design-for-azure-storage-accounts&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Azure ポータルからデフォルト設定で構築していくと、「Standard 汎用 v2」が選択されると思います。&lt;/p&gt;&#xA;&lt;p&gt;こちらを使えば、よくある Web サイト等を動かすには十分な性能のものが利用でき、安価にデータを保管できます。&lt;/p&gt;&#xA;&lt;p&gt;必要に応じて CDN などの他のサービスも組み合わせますかね。&lt;/p&gt;&#xA;&lt;p&gt;これに対し、「Standard 汎用 v2」以外には下記の Premium なオプションがあります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Premium ブロック BLOB&lt;/li&gt;&#xA;&lt;li&gt;Premium ファイル共有&lt;/li&gt;&#xA;&lt;li&gt;Premium ページ BLOB&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;「Standard 汎用 v2」の場合、Blob Storage (Data Lake Storage を含む)、Queue Storage、Table Storage、Azure Files の 4 つのサービスが提供されますが、上記の Premium なオプションを利用した場合は特定のサービスにサポートが限定されます。&lt;/p&gt;&#xA;&lt;p&gt;各オプションについて、高いスループット以外のドキュメント上で気になるところをピックアップしていきます。&lt;/p&gt;&#xA;&lt;p&gt;（2023/7/28 時点のドキュメントからピックアップ）&lt;/p&gt;&#xA;&lt;h3 id=&#34;premium-ブロック-blob&#34;&gt;Premium ブロック BLOB&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高速の一貫した応答時間を要するワークロードや、小さな読み書きが大量に行われるワークロードに適している&lt;/li&gt;&#xA;&lt;li&gt;コスト効率で言うと、トランザクションコストが低く設定されており、使用方法によっては「Standard 汎用 v2」よりも安くなる場合も考えられる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;premium-ファイル共有&#34;&gt;Premium ファイル共有&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;サーバー メッセージ ブロック (SMB) と NFS ファイル共有の両方をサポートする必要がある場合に利用&lt;/li&gt;&#xA;&lt;li&gt;最大同時要求レートは 100,000 IOPS で、Standard の 20,000 IOPS よりはるかに高い&lt;/li&gt;&#xA;&lt;li&gt;ストレージアカウントの最大容量は(100TiB)で、Standard の 5PiB より小さい&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;premium-ページ-blob&#34;&gt;Premium ページ BLOB&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;BLOB あたり最大 7,500 IOPS と 250MBps のプロビジョニングされたディスク パフォーマンスを提供&lt;/li&gt;&#xA;&lt;li&gt;サイズは固定で最大 8TB&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;補足blob-のアクセス層&#34;&gt;補足：Blob のアクセス層&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/ja-jp/training/modules/design-data-storage-solution-for-non-relational-data/5-design-for-azure-blob-storage&#34;&gt;https://learn.microsoft.com/ja-jp/training/modules/design-data-storage-solution-for-non-relational-data/5-design-for-azure-blob-storage&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Terraformを使ってAKS上にFluxを導入する手順とデモ</title>
      <link>https://blog.pokapu.jp/post/deploy-flux-on-aks-with-terraform/</link>
      <pubDate>Thu, 06 Jul 2023 09:36:15 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/deploy-flux-on-aks-with-terraform/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;GitOps は、開発者がコードを Git リポジトリにプッシュすることで自動的にインフラストラクチャーが更新される仕組みです。&lt;/p&gt;&#xA;&lt;p&gt;Flux は、GitOps を実現するためのツールであり、Kubernetes の manifest ファイルを Git リポジトリに保存し、変更があるたびに自動でデプロイすることができます。&lt;/p&gt;&#xA;&lt;p&gt;本記事では、Terraform を用いて AKS 上に Flux を導入する手順を説明し、GitOps のデモを行います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;aks-上に-flux-を導入する手順&#34;&gt;AKS 上に Flux を導入する手順&lt;/h2&gt;&#xA;&lt;h3 id=&#34;連携先の-github-リポジトリの準備&#34;&gt;連携先の GitHub リポジトリの準備&lt;/h3&gt;&#xA;&lt;p&gt;GitHub リポジトリが空だと Terraform の実行時にエラーになるため、main ブランチに readme か何かを入れておいてください。&lt;/p&gt;&#xA;&lt;p&gt;続いて GitHub との認証情報の準備です。&#xA;今回は Deploy key を用いて Flux から GitHub に接続する方針で説明します。&lt;/p&gt;&#xA;&lt;p&gt;Deploy key の作成方法は下記です。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;接続に使用する SSH キーを生成します&#xA;&lt;ul&gt;&#xA;&lt;li&gt;参考：&lt;a href=&#34;https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key&#34;&gt;https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;対象のリポジトリの「Setting」から、「Deploy keys」を開きます&lt;/li&gt;&#xA;&lt;li&gt;「Add deploy key」をクリックします&lt;/li&gt;&#xA;&lt;li&gt;Title に任意の名称を設定し、SSH キーの公開鍵をコピペし、「Allow write access」のチェックを入れて「Add key」します&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;SSH キーの秘密鍵は Terraform の実行時に必要になります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;aks-と-flux-の導入&#34;&gt;AKS と Flux の導入&lt;/h2&gt;&#xA;&lt;p&gt;AKS の作成と Flux の導入は Terraform で実現しましょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ChatGPT が子供向けの曲を作ったらどうなる？</title>
      <link>https://blog.pokapu.jp/post/what-if-chatgpt-made-a-song-for-kids/</link>
      <pubDate>Sat, 13 May 2023 13:29:27 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/what-if-chatgpt-made-a-song-for-kids/</guid>
      <description>&lt;p&gt;社内で爆発的に流行っている ChatGPT に手を出したら、とてもハマってしまいました。&#xA;信長の野望以来のマイブーム？&lt;/p&gt;&#xA;&lt;p&gt;隙間時間に無理難題を問いかけて、反応を楽しんでいます。&#xA;問いかけに対してうまく答えたり答えなかったりするところが、何となく子育てに近い感じがします。&lt;/p&gt;&#xA;&lt;p&gt;ちょっとお遊びですが、子供向けの曲を作ってもらおうとしてみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まずは作詞&#34;&gt;まずは作詞！&lt;/h2&gt;&#xA;&lt;p&gt;すごくアバウトに振ってみましょう。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;架空の子供番組の歌を作って&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;↓&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.pokapu.jp/css/hugo-easy-gallery.css&#34; /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/001.png&#34; alt=&#34;/what-if-chatgpt-made-a-song-for-kids/001.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/001.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;lyrics 1&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;それっぽい！？&lt;/p&gt;&#xA;&lt;p&gt;最後の歌詞を見る限りは、オープニング曲というよりエンディング曲ですかね？&lt;/p&gt;&#xA;&lt;h2 id=&#34;コード進行は作れるか&#34;&gt;コード進行は作れるか？&lt;/h2&gt;&#xA;&lt;p&gt;続いて曲にするためにコード進行を決めていきましょう。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;良いね！&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;コード進行を教えて&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;↓&#xA;&#xA;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/002.png&#34; alt=&#34;/what-if-chatgpt-made-a-song-for-kids/002.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/002.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;chord progression 1&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;う～ん・・・流石にこれは詰まらなすぎます。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ちょっとつまらないので、ヴァースで変化をつけて&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;↓&#xA;&#xA;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/003.png&#34; alt=&#34;/what-if-chatgpt-made-a-song-for-kids/003.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/003.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;chord progression 2&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;(ヴァースじゃなくてコーラスで変化を付けさせるべきだった気も・・・)&lt;/p&gt;&#xA;&lt;p&gt;いやぁ・・・これもちょっとなぁ。&lt;/p&gt;&#xA;&lt;p&gt;私の好きな、某イスが主役の番組の音楽とか想像すると物足りないです。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;最近の子供番組はもっと複雑な進行になる印象です。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;もう少し思い切った形になりますか？&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;↓&#xA;&#xA;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/004.png&#34; alt=&#34;/what-if-chatgpt-made-a-song-for-kids/004.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/004.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;chord progression 3&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;ちょっとやり過ぎな感じもしますが、良しとしますか！&lt;/p&gt;&#xA;&lt;h2 id=&#34;コードに合わせて歌詞を調整&#34;&gt;コードに合わせて歌詞を調整&lt;/h2&gt;&#xA;&lt;p&gt;ブリッジが追加されて歌詞との対応関係が崩れたようなので、歌詞を調整してみます。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;良いですね、このコードに沿って歌の歌詞を調整してください。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;↓&#xA;&#xA;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/005.png&#34; alt=&#34;/what-if-chatgpt-made-a-song-for-kids/005.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/005.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;lyrics 2&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/006.png&#34; alt=&#34;/what-if-chatgpt-made-a-song-for-kids/006.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/006.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;lyrics 2&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;やはりエンディング曲な締めですが、弾き語りで使えそうなメモになってきました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;メロディーラインも作れるか&#34;&gt;メロディーラインも作れるか？&lt;/h2&gt;&#xA;&lt;p&gt;ここまで来たらメロディーラインも作ってほしいですね。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;メロディラインを作ってください&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;↓&#xA;&#xA;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/007.png&#34; alt=&#34;/what-if-chatgpt-made-a-song-for-kids/007.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/007.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;melody 1&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;途中で回答の生成を止めちゃいましたが、音楽の生成をやろうとしてたので、文字で再度書いてもらうことに。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ドレミファソの音階の文字で表現して良いですよ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;↓&#xA;&#xA;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/008.png&#34; alt=&#34;/what-if-chatgpt-made-a-song-for-kids/008.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/008.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;melody 2&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;どのコードの範囲にどの音があるのか見えなくなっちゃいました。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;コードと音階との関係性が読み取りづらいので、小説単位で区切り記号「|」を入れて&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;↓&#xA;&#xA;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/009.png&#34; alt=&#34;/what-if-chatgpt-made-a-song-for-kids/009.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/what-if-chatgpt-made-a-song-for-kids/009.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;melody 3&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>kubectl waitでいろいろ待ってみよう</title>
      <link>https://blog.pokapu.jp/post/lets-wait-for-various-things-with-kubectl-wait/</link>
      <pubDate>Wed, 18 Jan 2023 20:55:17 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/lets-wait-for-various-things-with-kubectl-wait/</guid>
      <description>&lt;p&gt;Kubernetes はマニフェストファイルを用いて状態を定義することで、思い描く環境を作ることができるのが便利ですよね。&lt;/p&gt;&#xA;&lt;p&gt;ただ、ある一定の前提を満たさないと状態が定義できない時があります。&lt;/p&gt;&#xA;&lt;p&gt;例えば namespace が事前に存在していないと、その名前空間にはリソースが作れません。&lt;/p&gt;&#xA;&lt;p&gt;namespace の場合は &lt;code&gt;kubectl create namespace&lt;/code&gt; を実行してからほかの作業を実施するような順次実行をすることで解決できますね。&lt;/p&gt;&#xA;&lt;p&gt;これで解決しないとき、例えば Kubernetes Operator のインストール完了を待機したい場合はどうすると良いでしょうか？&lt;/p&gt;&#xA;&lt;h2 id=&#34;kubectl-wait-で作業完了を待機&#34;&gt;kubectl wait で作業完了を待機&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;kubectl wait&lt;/code&gt; というコマンドがあります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#wait&#34;&gt;https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#wait&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;このコマンドは、リソースの状態が指定した状態になるのを待機してくれます。&lt;/p&gt;&#xA;&lt;p&gt;分かりやすい話だと例えば、deployment が available になるのを待機するには下記のように記載します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl wait --timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;90s --for&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;condition&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;available deployment/name-of-deployment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;timeout の指定により、90 秒以内に状態が変わらなければ諦めます。&lt;/p&gt;&#xA;&lt;p&gt;こちらは deployment 以外にも適用できるようで、Kubernetes Operator のインストールに使われる installplan が installed になるのを待機するにはこんな風に書けば良さそうです。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl wait --timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;90s --for&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;condition&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;installed installplan/name-of-installplan -n operators&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このあたりを組み合わせれば、Kubernetes Operator のインストール処理の完了を待機して後続処理を実装することができそうですね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;短いですが、さまざまなリソースの状態を待機できる &lt;code&gt;kubectl wait&lt;/code&gt; についてご紹介してみました。&lt;/p&gt;&#xA;&lt;p&gt;特に初期セットアップの自動化に役立つコマンドなのではないでしょうか？&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azureお父さん必見！赤ちゃんのうんち記録アプリで子育てをDX！?</title>
      <link>https://blog.pokapu.jp/post/baby-info-recording-system/</link>
      <pubDate>Fri, 02 Dec 2022 10:00:00 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/baby-info-recording-system/</guid>
      <description>&lt;p&gt;※ この記事は、cloud.config Tech Blog にもマルチポストする予定です&lt;/p&gt;&#xA;&lt;p&gt;子供が産まれて妻子の入院期間中、体温や授乳回数やおしっこ・うんちの時間を記録する紙があって、そこに毎日記録していました。&lt;/p&gt;&#xA;&lt;p&gt;退院後もそのフォーマットを Excel で真似て紙に印刷して使っていて、子供の不調が無いか確認していました。&lt;/p&gt;&#xA;&lt;p&gt;子供が 1 歳になった今も一応、記録内容を減らした紙を運用してはいるものの、ほとんど問題ないのであまり書いていないです。&lt;/p&gt;&#xA;&lt;p&gt;ただその中で、絶対書いておきたいのが、&lt;/p&gt;&#xA;&lt;p&gt;うんちの記録です！&lt;/p&gt;&#xA;&lt;p&gt;便秘だと不機嫌になったり場合によっては病院に行かないといけなくなります。&lt;/p&gt;&#xA;&lt;p&gt;うちの子は最近は割と快便ですが、最初の頃は便秘でとても心配しました。&lt;/p&gt;&#xA;&lt;p&gt;また、うんちがあまり出ていない状態でお風呂に入ると・・・ね。。&lt;/p&gt;&#xA;&lt;p&gt;ということで、うんちの回数を記録するアプリを書いてみましたのでご紹介です。&lt;/p&gt;&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.pokapu.jp/css/hugo-easy-gallery.css&#34; /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/baby-info-recording-system/001.png&#34; alt=&#34;/baby-info-recording-system/001.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/baby-info-recording-system/001.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Screen shot&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;アプリの概要&#34;&gt;アプリの概要&lt;/h2&gt;&#xA;&lt;p&gt;カレンダーの中の「＋」ボタンを押すと、当日の枠に 💩 マークがつきます。&lt;/p&gt;&#xA;&lt;p&gt;データは Cosmos DB に保管されます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アプリコード&#34;&gt;アプリコード&lt;/h2&gt;&#xA;&lt;p&gt;Visual Studio 2022 で作成しました。GitHub で見れるようにしています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/baby-info-recording-system&#34;&gt;https://github.com/hirokimatsueda/baby-info-recording-system&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;フロントアプリの実装は大目に見てください。。&lt;/p&gt;&#xA;&lt;p&gt;フロントの作りが微妙ですが・・・赤ちゃん ID を変更すると別々のデータを管理できるので、双子や兄弟のデータも扱えます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アーキテクチャ概要&#34;&gt;アーキテクチャ概要&lt;/h2&gt;&#xA;&lt;p&gt;インフラとしては Azure の Static Web Apps での動作を想定し、情報を CosmosDB に保存するので、比較的安価に運用できるものになっています。&lt;/p&gt;&#xA;&lt;p&gt;アプリは &lt;a href=&#34;https://learn.microsoft.com/ja-jp/aspnet/core/blazor/?view=aspnetcore-6.0&#34;&gt;ASP.NET Core Blazor&lt;/a&gt; での記述です。&lt;/p&gt;&#xA;&lt;p&gt;インフラもアプリも、ベースとなる考え方は以前ブログでご紹介した下記のコードです。&#xA;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;インフラ構築&#34;&gt;インフラ構築&lt;/h2&gt;&#xA;&lt;p&gt;Api は Static Web Apps のデフォルトの機能で動かすと Managed ID が使えないため、Static Web Apps とは別で構築した Functions を Static Web Apps にリンクする形を取るのがポイントです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>35歳エンジニアが使える言語の変遷</title>
      <link>https://blog.pokapu.jp/post/changes-in-programming-languages-that-35-year-old-engineers-can-now-use/</link>
      <pubDate>Mon, 05 Sep 2022 21:01:24 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/changes-in-programming-languages-that-35-year-old-engineers-can-now-use/</guid>
      <description>&lt;p&gt;「SE の 35 歳定年説」みたいなのを気にしながら生き方を考えていたかもしれません。&lt;/p&gt;&#xA;&lt;p&gt;35 歳になってみて、プログラムを書くことに対してどうだったかな？と振り返ってみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;10-歳小学生&#34;&gt;10 歳～小学生&lt;/h2&gt;&#xA;&lt;p&gt;Excel VBA を使ってました。&lt;/p&gt;&#xA;&lt;p&gt;ナンバープレイス（数独と言った方が伝わる？）の答え合わせツールを作ったなぁ、程度ですが・・・いや、勝手に答えを出してくれるわけではなく、別シートに書いてある回答と If 文で比較しただけです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;中学生&#34;&gt;中学生&lt;/h2&gt;&#xA;&lt;p&gt;Visual Basic 6.0（VB6）を使っていました。&lt;/p&gt;&#xA;&lt;p&gt;「のんびりゆっくり Visual Basic」という書籍が愛読書でした。&lt;/p&gt;&#xA;&lt;p&gt;夏休みの自由研究で毎年ゲームを作っていました。&lt;/p&gt;&#xA;&lt;p&gt;中 2 の時にシューティングゲームを作るために Windows API にも手を出しました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;高専生&#34;&gt;高専生&lt;/h2&gt;&#xA;&lt;p&gt;専攻科まで行ったので 7 年間ですね。&lt;/p&gt;&#xA;&lt;p&gt;授業で習った C 言語や Java などが使えるようになりました。&lt;/p&gt;&#xA;&lt;p&gt;研究で C++と OpenGL で毛筆シミュレーションを作ったり、同じく C++と OpenGL で高専プロコンのために金魚すくいシミュレーターを作ったりしました。&lt;/p&gt;&#xA;&lt;p&gt;ただ趣味のプログラミングとしては相変わらず VB6 が好きでした。&lt;/p&gt;&#xA;&lt;h2 id=&#34;社会人1-社目2-社目&#34;&gt;社会人（1 社目、2 社目）&lt;/h2&gt;&#xA;&lt;p&gt;Ruby に手を出したり、古の言語に触れてみたり、幅広い言語を使うことになりました。&#xA;その中でも Java や.NET 系のオブジェクト指向言語（C#、VB.NET）が主力だったと思います。&lt;/p&gt;&#xA;&lt;p&gt;チーム開発の経験が進むにつ入れて、VB6 との距離は遠ざかっていきました・・・&lt;/p&gt;&#xA;&lt;p&gt;社会人になってからは C#が一番好きな言語になりました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;社会人3-社目&#34;&gt;社会人（3 社目）&lt;/h2&gt;&#xA;&lt;p&gt;最初の頃は C#の技術力を武器に働きました。&lt;/p&gt;&#xA;&lt;p&gt;その後、Docker や PowerShell など、言語のカテゴリで書くか微妙なところですが、次第にインフラに寄った知識が増えていきました。&lt;/p&gt;&#xA;&lt;p&gt;いつの間にか terraform を覚え、Kubernetes のマニフェストファイル(yaml)も読み書きできるようになっていきました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>実用性重視！AzureのマネージドID活用のサンプルコード(アプリコード)</title>
      <link>https://blog.pokapu.jp/post/azure-managed-id-sample-application/</link>
      <pubDate>Sat, 20 Aug 2022 14:50:39 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/azure-managed-id-sample-application/</guid>
      <description>&lt;p&gt;下記のサンプル実装のアプリコード部分を解説します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;アプリ処理詳細&#34;&gt;アプリ処理詳細&lt;/h2&gt;&#xA;&lt;p&gt;コードはこちら:&#xA;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample/blob/main/applications/DataApis&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample/blob/main/applications/DataApis&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;詳細と言うほどのものではないですが・・・。&lt;/p&gt;&#xA;&lt;h3 id=&#34;getdata&#34;&gt;GetData&lt;/h3&gt;&#xA;&lt;p&gt;リクエストパラメータから &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;category&lt;/code&gt; を読み取って、対象のデータを Cosmos DB から取得し返却します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;putdata&#34;&gt;PutData&lt;/h3&gt;&#xA;&lt;p&gt;リクエストボディのデータを Cosmos DB に Upsert します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;実装のポイント&#34;&gt;実装のポイント&lt;/h2&gt;&#xA;&lt;p&gt;マネージド ID という観点で言うと、CosmosClient に渡すクレデンシャル情報に &lt;code&gt;new DefaultAzureCredential()&lt;/code&gt; を指定するくらいです。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; CosmosClient InitializeCosmosClient()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CosmosClient(Environment.GetEnvironmentVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COSMOS_ENDPOINT&amp;#34;&lt;/span&gt;, EnvironmentVariableTarget.Process), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DefaultAzureCredential());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これにより Functions 上ではマネージド ID のクレデンシャルが使用されます。&lt;/p&gt;&#xA;&lt;p&gt;ローカル PC 上で実行する場合は、ローカル PC 上の認証情報を使用してくれるので、例えば az login したユーザーが Cosmos DB のデータへのアクセス権限を持っていればローカル PC でデバッグが可能です。&lt;/p&gt;&#xA;&lt;p&gt;ほかのポイントとしては、CosmosClient をメソッド呼び出し時に生成するのではなく Static 変数として持っておき、Lazy クラスを活用した初期化を実施しています。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Lazy&amp;lt;CosmosClient&amp;gt; lazyClient = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Lazy&amp;lt;CosmosClient&amp;gt;(InitializeCosmosClient);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これにより CosmosClient の初期化というコストの高い処理回数を削減しています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;アプリ開発のポイントを整理しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>実用性重視！AzureのマネージドID活用のサンプルコード(インフラコード)</title>
      <link>https://blog.pokapu.jp/post/azure-managed-id-sample-infrastructure/</link>
      <pubDate>Sat, 20 Aug 2022 14:50:38 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/azure-managed-id-sample-infrastructure/</guid>
      <description>&lt;p&gt;下記のサンプル実装のインフラコード部分を解説します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;インフラ構成詳細&#34;&gt;インフラ構成詳細&lt;/h2&gt;&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.pokapu.jp/css/hugo-easy-gallery.css&#34; /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/azure-managed-id-sample-infrastructure/001.png&#34; alt=&#34;/azure-managed-id-sample-infrastructure/001.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/azure-managed-id-sample-infrastructure/001.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Architecture&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;概要記事で「シンプル」と表現しましたが、構築されるリソースを明記すると若干インパクトがあるかもしれません。&#xA;しかしかなり最低限だと思いますのでどうかお付き合いを・・・。&lt;/p&gt;&#xA;&lt;p&gt;本質的に必要なのは、中央の Functions と Cosmos DB です。&lt;/p&gt;&#xA;&lt;p&gt;Cosmos DB の中にはデータベースやコンテナーの概念があるので、これらもインフラ構築時に作成してしまいます。&lt;/p&gt;&#xA;&lt;p&gt;Azure のリソースは「診断設定」を設定するとリソースの状態が観測できるので、Functions と Cosmos DB に対して設定しておきます。診断ログの保管先として Log Analytics を指定しています。&lt;/p&gt;&#xA;&lt;p&gt;Functions のアプリの状態の観測のため、Application Insights と接続しています。&lt;/p&gt;&#xA;&lt;p&gt;Functions ではシステム割り当てマネージド ID を有効にして、Cosmos DB の権限設定でこのマネージド ID が Cosmos DB 内のデータを操作することを許可します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;terraform-を用いた構築&#34;&gt;terraform を用いた構築&lt;/h2&gt;&#xA;&lt;p&gt;コードはこちら:&#xA;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample/tree/main/infrastructure/terraform&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample/tree/main/infrastructure/terraform&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Azure のインフラ構築には &lt;a href=&#34;https://www.terraform.io/&#34;&gt;terraform&lt;/a&gt; を利用しています。&lt;/p&gt;&#xA;&lt;p&gt;terraform についての説明は割愛させていただき、どのような方針で実装しているかを記載します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;module-への処理の分割&#34;&gt;module への処理の分割&lt;/h3&gt;&#xA;&lt;p&gt;terraform は、カレントディレクトリ配下（サブディレクトリを除く）の tf ファイルをすべて確認してインフラ構築をしてくれますが、リソース数が多い場合はコードの見通しが悪くなりがちです。&lt;/p&gt;&#xA;&lt;p&gt;この時、&lt;a href=&#34;https://www.terraform.io/language/modules&#34;&gt;modules&lt;/a&gt; という概念を使用すると処理の詳細を別フォルダに整理できるので見通しが良くなります。&lt;/p&gt;&#xA;&lt;h3 id=&#34;マネージド-id-への権限付与&#34;&gt;マネージド ID への権限付与&lt;/h3&gt;&#xA;&lt;p&gt;下記の実装で権限付与を行っています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample/blob/main/infrastructure/terraform/modules/cosmos_db_sql/main.tf&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample/blob/main/infrastructure/terraform/modules/cosmos_db_sql/main.tf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/cosmosdb_sql_role_definition&#34;&gt;azurerm_cosmosdb_sql_role_definition&lt;/a&gt; を使用し、Cosmos DB のデータへのアクセス権限を定義します。&lt;/p&gt;&#xA;&lt;p&gt;これはアクセス権限の定義であり、割り当てではないです。&lt;/p&gt;&#xA;&lt;p&gt;割り当てには &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/cosmosdb_sql_role_assignment&#34;&gt;azurerm_cosmosdb_sql_role_assignment&lt;/a&gt; を使用しています。&lt;/p&gt;&#xA;&lt;p&gt;サンプルコードでは 2 回登場しますが、&lt;code&gt;user&lt;/code&gt;と名付けた方は terraform を実行した人への権限付与、&lt;code&gt;data_contributor&lt;/code&gt;と名付けた方は Functions への権限不要になります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>実用性重視！AzureのマネージドID活用のサンプルコード(概要)</title>
      <link>https://blog.pokapu.jp/post/azure-managed-id-sample-summary/</link>
      <pubDate>Sat, 20 Aug 2022 14:50:37 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/azure-managed-id-sample-summary/</guid>
      <description>&lt;p&gt;Azure のマネージド ID は分かれば非常に有用な概念なのですが、いざ実装するとなった場合、インフラとアプリケーションが密接に関わっていることもあってハードルが高く思うケースがあると思います。&lt;/p&gt;&#xA;&lt;p&gt;そんな皆様のために、いつもの当たり障りのない記事ではなく、しっかり実用的に使えるコードを用意しました。&lt;/p&gt;&#xA;&lt;p&gt;早速全体像をご紹介します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;サンプルコードの概要&#34;&gt;サンプルコードの概要&lt;/h2&gt;&#xA;&lt;p&gt;コードは下記にあります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;何らかのデータを Functions を経由して Cosmos DB に保管・取得するアプリとインフラのコードのサンプルです。&lt;/p&gt;&#xA;&lt;p&gt;データは少なくとも id と category の値を持つことを想定します。こんな感じで。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc123&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;category&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aaaabbbbcccc&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;category は Cosmos DB 上のパーティションキーとして設定しますので、一定の法則で値が入ると良いことがありそうですね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アーキテクチャ&#34;&gt;アーキテクチャ&lt;/h2&gt;&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.pokapu.jp/css/hugo-easy-gallery.css&#34; /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/azure-managed-id-sample-summary/001.png&#34; alt=&#34;/azure-managed-id-sample-summary/001.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/azure-managed-id-sample-summary/001.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Architecture&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;ユーザーからのリクエストを Functions で受け取り、Cosmos DB とデータのやり取りをするシンプルな構成です。&lt;/p&gt;&#xA;&lt;p&gt;Functions の認証は Functions の webbook の API キーを利用します。&lt;/p&gt;&#xA;&lt;p&gt;Functions から Cosmos DB にアクセスする手段は様々なものがありますが、表題の通りマネージド ID を使用を想定しています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;コードの構成&#34;&gt;コードの構成&lt;/h2&gt;&#xA;&lt;p&gt;applications フォルダに Functions 上で動作する C#のアプリケーションがあり、infrastructure フォルダに Azure リソースを構築するための terraform のコードがあります。&lt;/p&gt;&#xA;&lt;p&gt;infrastructure フォルダの terraform を実行して Azure 上に Functions と Cosmos DB、その他関連リソースを作成した後、applications フォルダのアプリを Functions にデプロイすればアプリにアクセス可能になります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>幼少期に触れ合ったパソコンたち</title>
      <link>https://blog.pokapu.jp/post/computers-that-i-came-into-contact-with-in-my-childhood/</link>
      <pubDate>Tue, 21 Jun 2022 12:06:20 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/computers-that-i-came-into-contact-with-in-my-childhood/</guid>
      <description>&lt;p&gt;今年も非常に優秀な新卒入社社員の皆さんと出会えてうれしい限りです。&#xA;この季節になると、なんとなく自分の過去を振り返っているように思います。&lt;/p&gt;&#xA;&lt;p&gt;なぜ自分はエンジニアになったか？を説明する時に、「10 歳からプログラミングを始めたから」と普段答えているのですが、3 つのパソコンとの関りが大きく関係していると思っています。&lt;/p&gt;&#xA;&lt;p&gt;ちなみに私が小学校 1 年生くらいの時に Windows 95 が出ました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;windows-95-のパソコン&#34;&gt;Windows 95 のパソコン&lt;/h2&gt;&#xA;&lt;p&gt;Windows 3.1 のパソコンに Windows 95 の CD-ROM でアップグレードインストールしたものです。&lt;/p&gt;&#xA;&lt;p&gt;ブルースクリーンが頻発したりハードディスクがガリガリ音を立てたり、本当に不安定なパソコンでした。メモリは確か 8MB・・・GB じゃないですよ？&lt;/p&gt;&#xA;&lt;p&gt;ハードディスクも 700MB くらいだった記憶があります。&lt;/p&gt;&#xA;&lt;p&gt;メモリは後で 40MB に増設した記憶があります。&lt;/p&gt;&#xA;&lt;p&gt;ゲームをやるくらいでしか使っていませんでしたが、Windows という、その後爆発的に普及する OS に幼少期から触れられたのは大きいです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;nec-pc9801たぶん&#34;&gt;NEC PC9801（たぶん）&lt;/h2&gt;&#xA;&lt;p&gt;こちらは CLI ベースで動くパソコンですね。&lt;/p&gt;&#xA;&lt;p&gt;フロッピーディスクでアプリケーションを読み込んだりして使えるものです。&lt;/p&gt;&#xA;&lt;p&gt;このパソコンで父が趣味でオセロのプログラムを書いていて、そのソースコードの LINE 文を書き替えたら、オセロの盤面の線が斜めになったのが、プログラミングを始める本当の最初の点だと思います。&lt;/p&gt;&#xA;&lt;p&gt;これが無ければプログラミングは始めていなかったと思います。&lt;/p&gt;&#xA;&lt;p&gt;当時このパソコンが大好きでした。&lt;/p&gt;&#xA;&lt;p&gt;画面全体の表示を全て制御できるので、パソコンを全部コントロールしているような感覚になりました。&lt;/p&gt;&#xA;&lt;p&gt;高専の入試面接のときに「OS を作れるようになりたいです」などと無謀なことを言ったのもこちらがきっかけです。&#xA;（結局 OS の開発には１ミリも手を出しませんでした・・・）&lt;/p&gt;&#xA;&lt;h2 id=&#34;sharp-mz-731たぶん&#34;&gt;SHARP MZ-731（たぶん）&lt;/h2&gt;&#xA;&lt;p&gt;こちらは機械語で動くパソコンです。&lt;/p&gt;&#xA;&lt;p&gt;祖父がパソコンを勉強するために購入したと聞いています。&lt;/p&gt;&#xA;&lt;p&gt;家庭用テレビに繋ぐと画面表示ができて、メモリが確か 64KB、ハードディスクは無く、カセットテープでデータの読み書きができました。&lt;/p&gt;&#xA;&lt;p&gt;例えば 3 分くらいかけてカセットテープを読み込ませると BASIC が使えるようになります。&lt;/p&gt;&#xA;&lt;p&gt;私個人としてはあんまり活用していなかったですが、メモリ空間の一部がディスプレイの表示に繋がっていて間違えて書き換えると画面の色が変わったりとか、マシンが「暴走」して応答しなくなるとかを経験して、純粋にコンピュータがどういうものかを理解することに役立ったと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;メモリ容量とか具体的な数字で覚えているのが怖いですね。&lt;/p&gt;&#xA;&lt;p&gt;その後、パソコンは買い替えられて Windows Me とインターネット接続を手に入れ、Visual Basic 6.0 を買ってもらって本格的に独学でのプログラミングを始めたのでした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Static Web AppsのAPIでマネージドIDを使う方法</title>
      <link>https://blog.pokapu.jp/post/how-to-use-a-managed-id-with-the-static-web-apps-api/</link>
      <pubDate>Tue, 12 Apr 2022 11:34:24 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/how-to-use-a-managed-id-with-the-static-web-apps-api/</guid>
      <description>&lt;p&gt;Static Web Apps はお手軽に静的な Web サイトを提供するだけでなく、API もデプロイできます。&lt;/p&gt;&#xA;&lt;p&gt;API をデプロイした場合、Azure の他のリソースにアクセスする処理が必要なケースが多いと思います。&lt;/p&gt;&#xA;&lt;p&gt;API から他のリソースにアクセスするには接続情報を環境変数に持たせる手もありますが、マネージド ID を使用するとより安全でスマートなコードが組めるので良いですよね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;static-web-apps-の-api-は-2-種類&#34;&gt;Static Web Apps の API は 2 種類&lt;/h2&gt;&#xA;&lt;p&gt;Static Web Apps の API は &lt;strong&gt;マネージド関数&lt;/strong&gt; と &lt;strong&gt;独自の関数&lt;/strong&gt; の使用という 2 つの構成が存在します。&#xA;マネージド関数の方がお手軽に使えますが、下記の表にあるようにマネージド ID（現状の和訳だと「管理対象 ID」になっている）が使えません。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/static-web-apps/apis&#34;&gt;https://docs.microsoft.com/ja-jp/azure/static-web-apps/apis&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;このため、 &lt;strong&gt;独自の関数の使用&lt;/strong&gt; を選択する必要があります。&lt;/p&gt;&#xA;&lt;p&gt;・・・とキレイに書いてみましたが、実際はこの仕様を知らず、Static Web Apps のマネージド ID を有効化して IAM 設定をして「動かないなぁ。。」と悩んでいました。&#xA;マネージド関数でマネージド ID を使おうとして、169.254.169.254:80 にアクセスできない旨のエラーを見て気づきました。&#xA;上記 IP アドレスは下記のドキュメント等に登場しますが、Azure に対する何らかの問い合わせに使われる IP アドレスです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token&#34;&gt;https://docs.microsoft.com/ja-jp/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;独自の関数の使用&#34;&gt;独自の関数の使用&lt;/h2&gt;&#xA;&lt;p&gt;下記のドキュメントを参考に、Azure ポータルからポチポチ設定すれば連携できます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/static-web-apps/functions-bring-your-own&#34;&gt;https://docs.microsoft.com/ja-jp/azure/static-web-apps/functions-bring-your-own&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ドキュメントを見なくてもできちゃうくらい簡単です。&#xA;まずはマネージド ID を有効化した Functions を用意し、その後 Static Web Apps の「関数」のところからリンクすれば OK です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Static Web Appsの連携先GitHubリポジトリを変更する方法</title>
      <link>https://blog.pokapu.jp/post/how-to-modify-a-github-repository-that-links-to-static-web-apps/</link>
      <pubDate>Tue, 22 Mar 2022 14:41:42 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/how-to-modify-a-github-repository-that-links-to-static-web-apps/</guid>
      <description>&lt;p&gt;Static Web Apps (静的 Web アプリ) って便利ですよね！&#xA;単品のリソース構築で、CDN、Web サーバー、API サーバー、カスタムドメイン with HTTPS、アプリの自動デプロイが一気に実現できるので、これからどんどん活用したいです。&lt;/p&gt;&#xA;&lt;p&gt;ただ私はまだ慣れていないので、アプリを検証用の GitHub リポジトリで用意してインフラを作り、後から参照する GitHub リポジトリを差し替えたくなりました。&#xA;その手順が簡単に分からなかったので、本記事で整理したいと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;az staticwebapp disconnect&lt;/code&gt; してから &lt;code&gt;az staticwebapp update&lt;/code&gt; しましょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;&#xA;&lt;p&gt;Azure CLI で対応できました。&#xA;まずはいつも通り、Azure CLI で Azure にログインします。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az login -t tenant-id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az account set -s subscription-id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;続いて、&lt;code&gt;az staticwebapp disconnect&lt;/code&gt; を使用して Static Web Apps を GitHub リポジトリから切断します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az staticwebapp disconnect --name static-web-app-name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この状態で Azure ポータルから Static Web Apps の概要画面を眺めると、確かに GitHub リポジトリとの関連が無くなっていることが分かります。&lt;/p&gt;&#xA;&lt;p&gt;最後に &lt;code&gt;az staticwebapp update&lt;/code&gt; を実行して、目的の GitHub リポジトリと接続してあげましょう。&#xA;GitHub の Personal Access Token が必要です。&#xA;(記事執筆時点では –login-with-github のオプションは指定できませんでした)&lt;/p&gt;</description>
    </item>
    <item>
      <title>AKSユーザーがOpenShiftでクラスタのオートスケールを調べてみる</title>
      <link>https://blog.pokapu.jp/post/one-aks-user-explores-cluster-autoscale-with-openshift/</link>
      <pubDate>Tue, 28 Dec 2021 08:26:09 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/one-aks-user-explores-cluster-autoscale-with-openshift/</guid>
      <description>&lt;p&gt;AKS(Azure Kubernetes Services)は簡単な設定を入れるだけでクラスタのオートスケールが可能で便利ですが、あまり詳細なコントロールができない認識です。&lt;/p&gt;&#xA;&lt;p&gt;OpenShift だとマニフェストファイルでオートスケールを調整できるように見えるので、ちょっと調べてみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;openshift-環境の構築トライ&#34;&gt;OpenShift 環境の構築トライ&lt;/h2&gt;&#xA;&lt;p&gt;実物を知らずして進めるのも良くないと思い、構築の方もトライしました。&lt;/p&gt;&#xA;&lt;p&gt;色々試したポイントとして、OpenShift の 4 系は VM サイズが最低でも D8s_v3、最低 4 台立つようなので、サブスクリプションのクォータの調整をしてから対応を進めましょう。オートスケールを踏まえると、「Standard DSv3 ファミリ vCPUs」を 48 以上くらいにしておきたいです。「リージョンの vCPU の合計」の方もご確認を。&lt;/p&gt;&#xA;&lt;p&gt;サブスクリプションの準備が整ったら下記 URL の記事に従い、OpenShift 環境を構築します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/openshift/tutorial-create-cluster&#34;&gt;https://docs.microsoft.com/ja-jp/azure/openshift/tutorial-create-cluster&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;手順内で（省略可能）となっている部分については今回は省略してみました。&lt;/p&gt;&#xA;&lt;p&gt;クラスターが作成されるまでに通常約 35 分かかります。とのことです。気長に待ちましょう。&lt;/p&gt;&#xA;&lt;p&gt;下記を見るとクラスタへの接続方法が確認できます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/openshift/tutorial-connect-cluster#connect-to-the-cluster&#34;&gt;https://docs.microsoft.com/ja-jp/azure/openshift/tutorial-connect-cluster#connect-to-the-cluster&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;いろいろなビューがあって便利そうなので、こちらの画面も見つつ、ドキュメントを追ってみることにします。&lt;/p&gt;&#xA;&lt;h2 id=&#34;clusterautoscaler-の設定確認&#34;&gt;ClusterAutoscaler の設定確認&lt;/h2&gt;&#xA;&lt;p&gt;下記を参考に、ClusterAutoscaler の設定を見てみます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://access.redhat.com/documentation/ja-jp/openshift_container_platform/4.8/html/machine_management/configuring-clusterautoscaler&#34;&gt;https://access.redhat.com/documentation/ja-jp/openshift_container_platform/4.8/html/machine_management/configuring-clusterautoscaler&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;コマンドで設定する手順になっていますが、クラスターコンソールの「管理」→「クラスター設定」から、「Cluster Autoscaler」のところで設定することもできそうです。&lt;/p&gt;&#xA;&lt;p&gt;GPU ノードはお財布が辛いので、例えばこれくらいですかね？&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;autoscaling.openshift.io/v1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ClusterAutoscaler&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;podPriorityThreshold&lt;/span&gt;: -&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;resourceLimits&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;maxNodesTotal&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;cores&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;min&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;max&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;min&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;max&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;scaleDown&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;delayAfterAdd&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10m&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;delayAfterDelete&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5m&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;delayAfterFailure&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;30s&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;unneededTime&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;60s&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;resourceLimits で記載している値は AKS でも設定できなく無いかなと思うのですが、scaleDown の定義は気になりますね。&lt;/p&gt;</description>
    </item>
    <item>
      <title>マネージドIDを使用してRunbookからAzureリソースを操作する</title>
      <link>https://blog.pokapu.jp/post/control-azure-resources-from-a-runbook-using-a-managed-id/</link>
      <pubDate>Sun, 12 Dec 2021 12:06:20 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/control-azure-resources-from-a-runbook-using-a-managed-id/</guid>
      <description>&lt;p&gt;マネージド ID というものを使うと、サービスプリンシパルを用意せずに Azure リソースから Azure リソースの操作を実施することができます。&#xA;Runbook を用いてプライベート DNS ゾーンの操作を自動化を実施することを想定してその手順を用意してみました。&#xA;料金的にもリーズナブルで、すべて Azure ポータル上の作業で完結するので、一度やってみましょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;操作対象のリソースプライベート-dns-ゾーンの用意&#34;&gt;操作対象のリソース（プライベート DNS ゾーン）の用意&lt;/h2&gt;&#xA;&lt;p&gt;Azure ポータルから DNS ゾーンを作成します。&#xA;DNS ゾーンの名前は &lt;code&gt;private.example.com&lt;/code&gt; 、リソースグループ名は &lt;code&gt;blog&lt;/code&gt; で作成してみました。&lt;/p&gt;&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.pokapu.jp/css/hugo-easy-gallery.css&#34; /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/control-azure-resources-from-a-runbook-using-a-managed-id/001.png&#34; alt=&#34;/control-azure-resources-from-a-runbook-using-a-managed-id/001.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/control-azure-resources-from-a-runbook-using-a-managed-id/001.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Screenshot&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;このまま VNET に接続しなければ宝の持ち腐れですが、今回は説明用ということで。&lt;/p&gt;&#xA;&lt;h2 id=&#34;runbook-の用意&#34;&gt;Runbook の用意&lt;/h2&gt;&#xA;&lt;p&gt;Azure ポータルから Automation アカウントを作成します。&#xA;名前は &lt;code&gt;blogaccount&lt;/code&gt; とか、任意で大丈夫です。&lt;/p&gt;&#xA;&lt;p&gt;作成時に詳細設定でマネージド ID の設定ができるので、デフォルトの通り「システム割り当て」をオンにしておいてください。&#xA;（Automation アカウントの作成後、アカウント設定 – ID から、システム割り当てマネージド ID を「オン」にしても大丈夫です）&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/control-azure-resources-from-a-runbook-using-a-managed-id/002.png&#34; alt=&#34;/control-azure-resources-from-a-runbook-using-a-managed-id/002.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/control-azure-resources-from-a-runbook-using-a-managed-id/002.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Screenshot&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Automation アカウントが作成されたら、Automation アカウントのポータル画面から プロセス オートメーション – Runbook を開き、＋ Runbook を作成を選択します。&lt;/p&gt;&#xA;&lt;p&gt;Runbook の種類に PowerShell を選び、ランタイムバージョンは 5.1 を選んで作成します。&#xA;Runbook 名は &lt;code&gt;Add-PrivateDnsRecord&lt;/code&gt; にしましょうか。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KubernetesのTaintにビビらない</title>
      <link>https://blog.pokapu.jp/post/dont-be-afraid-of-kubernetes-taint/</link>
      <pubDate>Fri, 15 Oct 2021 08:35:01 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/dont-be-afraid-of-kubernetes-taint/</guid>
      <description>&lt;p&gt;Kubernetes をやり始めたころ、登場する言葉の多さに絶望したことを覚えています。&#xA;特にこの「Taint」はびっくりしました、「汚す」ってどういうこと？&#xA;ちょっと解説してみます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ノードを汚すという行為&#34;&gt;ノードを汚すという行為&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl taint&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のようなコマンドを使うと、ノードに Taint をつける、つまりノードを汚すことになります。&lt;/p&gt;&#xA;&lt;p&gt;なんだかネガティブな感じですよね。&lt;/p&gt;&#xA;&lt;p&gt;ここで大事なことは、「Pod はキレイ好き！」ということです。&lt;/p&gt;&#xA;&lt;p&gt;Taint が設定されたノードでは、普通の Pod は「こんな汚い場所で立ち上がりたくない！」となります。&lt;/p&gt;&#xA;&lt;p&gt;Taint を活用するコマンドで&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl drain&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というのがありますが、これを使うと Taint の作用等により Pod をノードから安全に追い出すことができ、ノードのメンテナンスが可能な状態になります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;汚れを許容する-toleration&#34;&gt;汚れを許容する Toleration&lt;/h2&gt;&#xA;&lt;p&gt;通常の Pod は完璧主義というか、あらゆる Taint を拒否します（たぶん）。&lt;/p&gt;&#xA;&lt;p&gt;でも、いつもすべてを清潔に保てるとは限りませんよね、例えば家の窓の掃除は結構妥協してたり・・・&lt;/p&gt;&#xA;&lt;p&gt;こういう、一部の Taint は気にしない、といった振る舞いを Pod にさせるために Toleration という概念があります。&lt;/p&gt;&#xA;&lt;p&gt;例えば Windows コンテナの Pod は Windows のノードでしか起動できないので、ノードに Windows 限定にする Taint をつけておき、Windows の Pod で Toleration を設定すれば良いことがありそうですね。&lt;/p&gt;&#xA;&lt;p&gt;（急にニッチな話題に・・・）&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;詳しいコマンドは解説しませんでしたが、「Taint」という概念については「Pod はキレイ好きだから汚れた場所にはいきたくない」という性格を覚えておくと、関連するドキュメントが一気に読みやすくなります。&lt;/p&gt;&#xA;&lt;p&gt;是非覚えておいてください。&lt;/p&gt;</description>
    </item>
    <item>
      <title>上限変更ができないクォータの存在を知る</title>
      <link>https://blog.pokapu.jp/post/know-the-existence-of-quotas-that-cannot-be-changed/</link>
      <pubDate>Tue, 06 Apr 2021 22:04:57 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/know-the-existence-of-quotas-that-cannot-be-changed/</guid>
      <description>&lt;p&gt;Azure にはクォータ上限という概念があり、リソース作成はクォータ範囲内でしかできず、ただしクォータ上限の引き上げが要求が可能です。&lt;/p&gt;&#xA;&lt;p&gt;vCPU に関しては上限の引き上げが可能ですが、上限の引き上げが不可能なリソースも存在します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;cdn-プロファイルは上限の引き上げが不可能&#34;&gt;CDN プロファイルは上限の引き上げが不可能&lt;/h2&gt;&#xA;&lt;p&gt;CDN プロファイルは、&lt;strong&gt;サブスクリプション単位に 25 個&lt;/strong&gt;までしか作成できません。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/azure-resource-manager/management/azure-subscription-service-limits#content-delivery-network-limits&#34;&gt;https://docs.microsoft.com/ja-jp/azure/azure-resource-manager/management/azure-subscription-service-limits#content-delivery-network-limits&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;クォータ上限の引き上げを要求したところ、上限増加はサポートされていないとのことでした。&#xA;1 つの CDN プロファイルに複数の CDN エンドポイントを作成可能なので、CDN エンドポイントを大量に作成する場合は計画的に設計する必要があります。&lt;/p&gt;&#xA;&lt;p&gt;1 つの CDN プロファイルに含められる CDN エンドポイントの数は 25 となっているので、大規模な仕組みを作る際はこちらも注意が必要です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;大規模な Azure インフラを構築する際は、クォータ上限の引き上げが可能かの確認も含め、クォータ上限に関する設計が必要です。&#xA;特に同一サブスクリプションに動的にリソースを作成する場合、リソースのスケールアウトを大幅に計画する場合は要注意です。&#xA;必要に応じてサブスクリプションを分割するなどして対応しましょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>goでjsonを臨機応変に扱う</title>
      <link>https://blog.pokapu.jp/post/treat-json-flexibly-with-go/</link>
      <pubDate>Fri, 10 Jul 2020 08:40:25 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/treat-json-flexibly-with-go/</guid>
      <description>&lt;p&gt;最近はスクリプト言語を使う時に何を使うのが良いか迷います。&lt;/p&gt;&#xA;&lt;p&gt;いや、もともと大して選んでいないんですが、Azure 関連の操作がメインだったので PowerShell をよく使っています。&lt;/p&gt;&#xA;&lt;p&gt;PowerShell は C#っぽく書けるので悪くないんですが、改めて、OS 関係なく軽快に動いてくれる言語として go に注目しています。&lt;/p&gt;&#xA;&lt;p&gt;プログラミングのリハビリを兼ねて go で Grafana を扱うコードを書いていたんですが、json を扱うところで苦労したのでノウハウをメモしておこうと思います。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;encoding/json&lt;/code&gt; を使用する場合のお話になります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-礼儀正しく扱う&#34;&gt;1. 礼儀正しく扱う&lt;/h2&gt;&#xA;&lt;p&gt;json の構造をすべて把握している場合は、その構造を表現した type を宣言し、&lt;code&gt;json.Unmarshal&lt;/code&gt; で変換された値を突っ込むことができます。&lt;/p&gt;&#xA;&lt;p&gt;一部定義するだけでも良いようです。&lt;/p&gt;&#xA;&lt;p&gt;例えば Grafana で &lt;code&gt;GET /api/search/&lt;/code&gt; を実行した結果の json を処理したい場合を考えます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://grafana.com/docs/grafana/latest/http_api/folder_dashboard_search/&#34;&gt;https://grafana.com/docs/grafana/latest/http_api/folder_dashboard_search/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;得られる json には、id、uid、title、・・・といくつかの値が得られますが、例えばその中で title と uid の値だけ拾いたいときは下記のような感じです。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DashboardOverview&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Title&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;title&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Uid&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;uid&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardJson&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;【&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Grafanaからjsonを取得する処理&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;】&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dashboards&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;DashboardOverview&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dashboardJson&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dashboards&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dashboards&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;こうすると、変数 dashboards にダッシュボードの title と uid が配列で格納されます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>自作のWindowsアプリをAKSに載せるキホン技</title>
      <link>https://blog.pokapu.jp/post/get-started-with-windows-container-aks-easily/</link>
      <pubDate>Wed, 08 Apr 2020 21:07:42 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/get-started-with-windows-container-aks-easily/</guid>
      <description>&lt;p&gt;Azure Kubernetes Service(以降、AKS)は Windows コンテナの使用できる構成を作成することができます。&lt;/p&gt;&#xA;&lt;p&gt;（記事公開時点ではパブリックプレビュー）&lt;/p&gt;&#xA;&lt;p&gt;Windows コンテナが使える AKS を用意して、アプリを動かしてみましょう。&lt;/p&gt;&#xA;&lt;p&gt;アプリの作成からインフラの作成まで一通り必要な手順を書いてみましたので、この記事をベースに Windows コンテナの世界に入門していただけたらと思います。&lt;/p&gt;&#xA;&lt;p&gt;また、アプリ開発、コンテナ作成、AKS 作成を一通り記載しているので、例えばアプリ開発は知識があるけどインフラはちょっと・・・という場合に部分的に参照していただけると嬉しいです。&lt;/p&gt;&#xA;&lt;p&gt;Azure Cloud Shell とはなんぞや？などの細かい説明は省いていますので、適宜調べながら読み進めていただけたらと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;（Windows 環境でしか動作しない）アプリケーションを作成します&lt;/li&gt;&#xA;&lt;li&gt;アプリケーションを載せたコンテナイメージを作成します&lt;/li&gt;&#xA;&lt;li&gt;コンテナイメージをコンテナレジストリ（ACR）に格納します&lt;/li&gt;&#xA;&lt;li&gt;Windows コンテナが動作する AKS を作成します&lt;/li&gt;&#xA;&lt;li&gt;マニフェストファイルを使用して、AKS 上でコンテナを動かします&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;web-アプリの作成&#34;&gt;Web アプリの作成&lt;/h2&gt;&#xA;&lt;p&gt;【作業環境の想定：手元の Windows PC】&lt;/p&gt;&#xA;&lt;p&gt;Web 上に公開されているサンプルアプリを使っても良いんですが、現実は自社で作成したアプリなどを使用すると思うので、Web アプリの作成からサラッと見てみましょう。&lt;/p&gt;&#xA;&lt;p&gt;Windows コンテナが必要なケースは、Windows でしか動作しないアプリ、例えば.NET Framework のアプリを使用している場合だと思われます。.NET Framework の ASP.NET MVC アプリを作っておきましょう。&lt;/p&gt;&#xA;&lt;p&gt;下記サイトから Visual Studio のインストーラをダウンロードします。&#xA;&lt;a href=&#34;https://visualstudio.microsoft.com/ja/downloads/&#34;&gt;https://visualstudio.microsoft.com/ja/downloads/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;インストーラを起動し、「ASP.NET と Web 開発」を選択してインストールします。&lt;/p&gt;&#xA;&lt;p&gt;インストールが成功したら、新規プロジェクトを起動して、C#の ASP.NET MVC アプリを作成しましょう。&lt;/p&gt;&#xA;&lt;p&gt;ちょっと古めのアプリを載せる想定だと思いますので、.NET Framework は「4.5.2」辺りが良いでしょうか。プロジェクト名は適当で良いので、「MVC」のアプリを作成してください。&lt;/p&gt;&#xA;&lt;p&gt;アプリが作成されたら、Visual Studio のソリューションエクスプローラーから、Views/Home/Index.cshtml を開き、適当な加工を加えて実行してみてください。例えば下記のような感じでザックリいきましょう。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ViewBag.Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;コンテナアプリのデモ&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;div class=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jumbotron&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;h1&amp;gt;ASP.NET&amp;lt;/h1&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;p class=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lead&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;コンテナで&lt;/span&gt;Webアプリを動かしてみよう&amp;lt;/p&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;F5 キーでアプリの正常動作を確認したら、アプリケーションを発行しましょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dockerfileに出てくる謎のexe、ServiceMonitor</title>
      <link>https://blog.pokapu.jp/post/mysterious-exe-that-appears-in-dockerfile/</link>
      <pubDate>Mon, 03 Feb 2020 21:29:12 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/mysterious-exe-that-appears-in-dockerfile/</guid>
      <description>&lt;h2 id=&#34;dockerfile-の基本的な書き方&#34;&gt;Dockerfile の基本的な書き方&lt;/h2&gt;&#xA;&lt;p&gt;皆様、Windows コンテナで遊んでいますか？&lt;/p&gt;&#xA;&lt;p&gt;Dockerfile に書く内容は、誤解を恐れず表現すると、だいたい下記のような流れですよね。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ベースイメージ&lt;/li&gt;&#xA;&lt;li&gt;ミドルウェアのインストール、セットアップの処理&lt;/li&gt;&#xA;&lt;li&gt;アプリケーションのコピー&lt;/li&gt;&#xA;&lt;li&gt;アプリケーションの起動を監視するために ENTRYPOINT を記載&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;これだけ認識していれば、例えば単発実行や無限ループで処理待機するコンソールアプリケーションのコンテナ化なんてのは、（細かいことを無視すれば）すぐにできてしまうと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;謎の-exe-servicemonitor&#34;&gt;謎の exe 、ServiceMonitor&lt;/h2&gt;&#xA;&lt;p&gt;しかし、例えば下記の Dockerfile を見てください。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/dotnet-framework-docker/blob/7d120a3da56ea5279e1b54a8185530af056c7b33/4.8/aspnet/windowsservercore-ltsc2019/Dockerfile&#34;&gt;https://github.com/microsoft/dotnet-framework-docker/blob/7d120a3da56ea5279e1b54a8185530af056c7b33/4.8/aspnet/windowsservercore-ltsc2019/Dockerfile&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;これは IIS で動く Web アプリを動かすときに使える Dockerfile になるんですが、 ENTRYPOINT に ServiceMonitor.exe なるものが指定されています。&lt;/p&gt;&#xA;&lt;p&gt;「なにこれ」と思いませんでしたか？&lt;/p&gt;&#xA;&lt;p&gt;私は思いました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;そもそも-entrypoint-って何だっけ&#34;&gt;そもそも ENTRYPOINT って何だっけ&lt;/h2&gt;&#xA;&lt;p&gt;ENTRYPOINT は「コンテナが実行するファイルを設定します。」とのことです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://docs.docker.jp/v1.11/engine/reference/builder.html#entrypoint&#34;&gt;http://docs.docker.jp/v1.11/engine/reference/builder.html#entrypoint&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;そして、その「実行するファイル」が終了すると共に、コンテナが終了します。&lt;/p&gt;&#xA;&lt;p&gt;これを IIS で動かすアプリに当てはめるとどうなるでしょうか？&lt;/p&gt;&#xA;&lt;p&gt;IIS で動かすアプリは exe ファイルでは無いので、それ単体で実行することはできませんよね。IIS の上に載せてあげることで初めて動作します。&lt;/p&gt;&#xA;&lt;p&gt;ということは、IIS が ENTRYPOINT に記載すべきものとなります。&lt;/p&gt;&#xA;&lt;p&gt;しかし、 IIS 自体はサービスなので、「コンテナが実行するファイル」とは違う概念になります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;サービスの起動状態を監視するアプリが欲しい&#34;&gt;「サービスの起動状態を監視するアプリ」が欲しい&lt;/h2&gt;&#xA;&lt;p&gt;例えば、「コンテナが実行するファイル」が IIS というサービスの起動状態を監視してくれて、そのサービスの状態に従って終了してくれたら良さそうに思いませんか？&lt;/p&gt;&#xA;&lt;p&gt;そんな役割を担ってくれるのが ServiceMonitor.exe です。&lt;/p&gt;&#xA;&lt;p&gt;よって、IIS のようなサービスの状態がコンテナの起動状態を左右する場合は、 ServiceMonitor.exe を ENTRYPOINT に指定してあげればコンテナが実現できそうですね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;ServiceMonitor.exe のおかげて IIS アプリのコンテナが実現できることが分かりましたでしょうか？&#xA;広く公開されている Dockerfile は参考になるので、「これ何やってるんだろう？」を深堀してみると面白いですし、勉強になります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>エンジニア業務を加速しよう！</title>
      <link>https://blog.pokapu.jp/post/speeding-up-engineering-work/</link>
      <pubDate>Tue, 03 Dec 2019 08:22:49 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/speeding-up-engineering-work/</guid>
      <description>&lt;h2 id=&#34;スピーディーに仕事がしたい&#34;&gt;スピーディーに仕事がしたい！&lt;/h2&gt;&#xA;&lt;p&gt;先月は &lt;code&gt;docker&lt;/code&gt; から始まるコマンドを何度も何度も実行していた気がします。&lt;/p&gt;&#xA;&lt;p&gt;私の今の仕事は検証がメインで、何度も似たようなコマンドを実行したり、何かをダウンロードしたりという作業を実施しています。&lt;/p&gt;&#xA;&lt;p&gt;検証作業は先が見えにくいので、できるだけスピーディーにやるべきことを繰り返して知見を増やしたいですよね。&lt;/p&gt;&#xA;&lt;p&gt;検証に限らずスピーディーに仕事をすることは大切だと思いますので、私が実践している仕事の高速化手法を書いてみます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;同じことをダラダラ何度も書かない-ctrl--rの活用&#34;&gt;同じことをダラダラ何度も書かない ([ctrl] + [R]の活用)&lt;/h2&gt;&#xA;&lt;p&gt;コマンドを実行する時のお話です。&lt;/p&gt;&#xA;&lt;p&gt;例えば、 docker build のコマンドって何度も同じ内容で実行するのに長くなりがちですよね。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker build . -t cloudconfig/blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上記で「いや、それくらいなら短いのでは？」と思った方、書いた文字の正しさを検証する時間を無視していませんか？&lt;/p&gt;&#xA;&lt;p&gt;例えば、 &lt;code&gt;docker&lt;/code&gt; を &lt;code&gt;dokcer&lt;/code&gt; と書き間違えちゃったとして、実行する前に気付けますか？&lt;/p&gt;&#xA;&lt;p&gt;できれば前回実行したコマンドをそのまま書いたことを書きたいですよね。&lt;/p&gt;&#xA;&lt;p&gt;そんな時、[ctrl] + [R] が使えます。&lt;/p&gt;&#xA;&lt;p&gt;Linux 環境で Bash を使用している場合や、Windows 環境で PowerShell を使用している場合に押してみてください。&lt;/p&gt;&#xA;&lt;p&gt;そして、&lt;code&gt;build&lt;/code&gt; とキーボードから入力すると、前に実行した &lt;code&gt;docker build&lt;/code&gt; の履歴が表示されると思います。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;reverse-i-search&lt;/code&gt; とか &lt;code&gt;bck-i-search&lt;/code&gt; とか呼ばれるみたいですね。&lt;/p&gt;&#xA;&lt;p&gt;使いたい候補が出たら [Enter] を押してそのまま実行したり、 [→] を押すなりして一部を修正して実行したりできるので、過去に成功したコマンドラインを流用できます。とても便利ですね！&lt;/p&gt;&#xA;&lt;p&gt;ただ、失敗したコマンドも出ますし、検索文字列が短すぎたりすると意図しない実行履歴が出る場合もありますので注意してください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;vm-を活用する&#34;&gt;VM を活用する&lt;/h2&gt;&#xA;&lt;p&gt;例えば、Docker を使用する時、どこで動かしていますか？&lt;/p&gt;&#xA;&lt;p&gt;自分の PC で動かしていませんか？&lt;/p&gt;&#xA;&lt;p&gt;自分の PC 上で動かすと便利なこともありますが、下記のようなリスクがあります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PC のリソースを食いつぶしてしまう&lt;/li&gt;&#xA;&lt;li&gt;ベースイメージのダウンロードに時間がかかる&lt;/li&gt;&#xA;&lt;li&gt;ミドルウェアの状態を把握しきれず、自分の PC でしか実行できない Dockerfile が出来上がる可能性がある&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;上記のようなリスクは、VM を使用することで改善できます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>職業プログラマの第一歩を踏み出したあなたへ</title>
      <link>https://blog.pokapu.jp/post/the-first-step-of-a-profession-programmer/</link>
      <pubDate>Fri, 21 Jun 2019 12:06:20 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/the-first-step-of-a-profession-programmer/</guid>
      <description>&lt;p&gt;10 歳からプログラミングやってます、と、プレゼン内で笑いを取ろうと喋ったら、喋りが下手すぎてリアクションがもらえず焦った松枝です。&lt;/p&gt;&#xA;&lt;p&gt;仕事でプログラミングをするようになった新卒の人に対して伝えたいことがあります。今年の弊社の新卒の皆さんにはお伝えしたのですが、こちらのブログにも書いてみようと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;背景読み飛ばし推奨&#34;&gt;背景（読み飛ばし推奨）&lt;/h2&gt;&#xA;&lt;p&gt;前述の通り 10 歳からプログラミングを始め、高専専攻科を卒業するまでの約 12 年間、趣味または研究でプログラミングをやっていました。&#xA;当時はまだ Windows 98 SE とかの時代で、小中学校の同級生でプログラミングができる人は皆無で、高専に入ってようやくまともに会話できる人が数人いる、というような状態でした。&lt;/p&gt;&#xA;&lt;p&gt;そんな状態の人が社会人になったので、自分の力はどこでも通用するんじゃね？という気持ちが半分、いやいや世の中にはもっとすごい人が必ずいるだろうついていけるかな？という気持ちが半分で、配属になりました。&lt;/p&gt;&#xA;&lt;p&gt;そこで出会ったチームリーダーさんの技術に圧倒されました。&#xA;力試しで与えられた課題を解いてレビューして頂いた結果、自分のコードの汚さ、詰めの甘さに気づくことができました。同時に、とても恵まれた環境に配属されたのだとワクワクしてきました。&lt;/p&gt;&#xA;&lt;p&gt;聞けばそのリーダーさんは当時 30 歳くらいで、プログラミングに初めて触れたのは大学生の頃ということでした。つまり、「プログラムを書く」というキャリア年数は私と同じくらいです。&#xA;しかし技術力は雲泥の差でした。私は間違ったものを積み重ねていたのだなという後悔の気持ちが襲ってきました。&#xA;若い人が同じような後悔を抱えずに過ごせるよう、仕事としてのプログラミングを始める人に最初に知ってほしい、いくつかのポイントを伝授します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;人が読みやすいコードを追求する&#34;&gt;人が読みやすいコードを追求する&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;半年後には何をやっているか分からないコードにしない&lt;/li&gt;&#xA;&lt;li&gt;変数名は分かりやすい単語を使う&#xA;&lt;ul&gt;&#xA;&lt;li&gt;できるだけ日本語のローマ字表記ではなく英語で書きましょう。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;コーディング規約を遵守する、フォーマッタを活用する&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;if( a== b){ c++;}&lt;/code&gt; とか書いてあったら、私は(心の中で)キレます。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;コメントを適宜書く。ただし書きすぎない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;// a を b に代入する&lt;/code&gt; みたいなプログラムの説明は要りません。&lt;/li&gt;&#xA;&lt;li&gt;そのコードで何をしたいのか伝わりにくい時にコメントを書いてください。&lt;/li&gt;&#xA;&lt;li&gt;伝わりにくいときはきっとコードを見直したほうが良いです。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;既存コードのフィーリングを尊重する&#xA;&lt;ul&gt;&#xA;&lt;li&gt;勝手にログ出力を端折ったりとかしないでください。せめてプルリクエスト上げるまでには戻して…&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;車輪の再開発を避ける&#xA;&lt;ul&gt;&#xA;&lt;li&gt;クイックソートとかを自分で作らずライブラリを活用しましょう。品質確保って大変ですよ？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自分の理解したコードを書く&#34;&gt;自分の理解したコードを書く&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ネット上の Stack Overflow や teratail などに記載しているコードをそのままコピペしない&lt;/li&gt;&#xA;&lt;li&gt;友達に直接コードを書いてもらわない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;参考にした、教えてもらった情報は何なのか、自分の知識に落とし込んでから、改めて今回のケースはどうすればよいのか考えて実装する。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;上記をまとめると、要は「美しいコードを書いてください」ということです。&#xA;音楽でいえば、例えばクラシックの音楽は何百年も昔に作られたにも関わらず、現代の私たちが聴いても良い曲だと感じますよね？&lt;/p&gt;&#xA;&lt;p&gt;コードも同じように、美しいコードを書けば長く愛されます。&#xA;バグを見つけることが容易なのですぐ直せますし、機能追加もしやすいです。&lt;/p&gt;&#xA;&lt;p&gt;最初は大変ですが、そのうち無意識に書けるようになりますので頑張りましょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Privacy Policy</title>
      <link>https://blog.pokapu.jp/privacy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blog.pokapu.jp/privacy/</guid>
      <description>&lt;p&gt;当サイトでは、Google によるアクセス解析ツール「Google アナリティクス」を使用しています。この Google アナリティクスはデータの収集のために Cookie を使用しています。&lt;/p&gt;&#xA;&lt;p&gt;このデータは匿名で収集されており、個人を特定するものではありません。&lt;/p&gt;&#xA;&lt;p&gt;この機能は Cookie を無効にすることで収集を拒否することが出来ますので、お使いのブラウザの設定をご確認ください。&lt;/p&gt;&#xA;&lt;p&gt;この規約に関しての詳細は &lt;a href=&#34;https://marketingplatform.google.com/about/analytics/terms/jp/&#34;&gt;Google アナリティクスサービス利用規約&lt;/a&gt; のページや &lt;a href=&#34;https://policies.google.com/technologies/ads?hl=ja&#34;&gt;Google ポリシーと規約&lt;/a&gt; のページをご覧ください。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
