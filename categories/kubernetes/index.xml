<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on 備忘録</title>
    <link>https://blog.pokapu.jp/categories/kubernetes/</link>
    <description>Recent content in Kubernetes on 備忘録</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <copyright>Copyright © 2022 Hiroki Matsueda</copyright>
    <lastBuildDate>Thu, 30 May 2024 13:37:20 +0900</lastBuildDate>
    <atom:link href="https://blog.pokapu.jp/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Keycloakとtraefikを使って認証環境を作る練習</title>
      <link>https://blog.pokapu.jp/post/practice-building-an-authentication-environment/</link>
      <pubDate>Thu, 30 May 2024 13:37:20 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/practice-building-an-authentication-environment/</guid>
      <description>&lt;p&gt;個人的に知識があいまいな認証回りの最小限の知見整理として、Traefik を用いて Keycloak で発行したアクセストークンが無いとアプリケーションにアクセスできないようにする最小限の設定を考えてみました。&lt;/p&gt;&#xA;&lt;p&gt;ちなみに GPT-4o にフォローしてもらって大枠を整理し、動作に不具合が起きた部分を再度調べて…という流れで進めました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;【要注意】&lt;/strong&gt; この手順に従って構成した環境は本番利用するにはセキュリティ面で問題があるので、あくまで Keycloak や Traefik の設定ポイントの参考としてください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;検証した各ミドルウェアのバージョン&#34;&gt;検証した各ミドルウェアのバージョン&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;minikube: v1.33.1&lt;/li&gt;&#xA;&lt;li&gt;Keycloak: 24.0.4&lt;/li&gt;&#xA;&lt;li&gt;Traefik: 2.11.2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;traefik-jwt-plugin: v0.7.1&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;前提条件&#34;&gt;前提条件&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Minikube&lt;/strong&gt; がインストールされている&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;kubectl&lt;/strong&gt; がインストールされている&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Helm&lt;/strong&gt; がインストールされている&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;ステップ-1-minikube-のセットアップ&#34;&gt;ステップ 1: Minikube のセットアップ&lt;/h2&gt;&#xA;&lt;p&gt;まず、Minikube を起動します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ステップ-2-keycloak-のデプロイ&#34;&gt;ステップ 2: Keycloak のデプロイ&lt;/h2&gt;&#xA;&lt;p&gt;Keycloak を最低限の構成でデプロイするために、以下の Kubernetes マニフェストファイルを作成します。&lt;code&gt;keycloak-deployment.yaml&lt;/code&gt;という名前で保存してください。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;quay.io/keycloak/keycloak:24.0.4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;args&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start-dev&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;KEYCLOAK_ADMIN&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;admin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;KEYCLOAK_ADMIN_PASSWORD&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;admin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;KC_PROXY&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;edge&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;keycloak&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次に、Keycloak のデプロイメントとサービスを作成します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>kubectl waitでいろいろ待ってみよう</title>
      <link>https://blog.pokapu.jp/post/lets-wait-for-various-things-with-kubectl-wait/</link>
      <pubDate>Wed, 18 Jan 2023 20:55:17 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/lets-wait-for-various-things-with-kubectl-wait/</guid>
      <description>&lt;p&gt;Kubernetes はマニフェストファイルを用いて状態を定義することで、思い描く環境を作ることができるのが便利ですよね。&lt;/p&gt;&#xA;&lt;p&gt;ただ、ある一定の前提を満たさないと状態が定義できない時があります。&lt;/p&gt;&#xA;&lt;p&gt;例えば namespace が事前に存在していないと、その名前空間にはリソースが作れません。&lt;/p&gt;&#xA;&lt;p&gt;namespace の場合は &lt;code&gt;kubectl create namespace&lt;/code&gt; を実行してからほかの作業を実施するような順次実行をすることで解決できますね。&lt;/p&gt;&#xA;&lt;p&gt;これで解決しないとき、例えば Kubernetes Operator のインストール完了を待機したい場合はどうすると良いでしょうか？&lt;/p&gt;&#xA;&lt;h2 id=&#34;kubectl-wait-で作業完了を待機&#34;&gt;kubectl wait で作業完了を待機&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;kubectl wait&lt;/code&gt; というコマンドがあります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#wait&#34;&gt;https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#wait&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;このコマンドは、リソースの状態が指定した状態になるのを待機してくれます。&lt;/p&gt;&#xA;&lt;p&gt;分かりやすい話だと例えば、deployment が available になるのを待機するには下記のように記載します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl wait --timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;90s --for&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;condition&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;available deployment/name-of-deployment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;timeout の指定により、90 秒以内に状態が変わらなければ諦めます。&lt;/p&gt;&#xA;&lt;p&gt;こちらは deployment 以外にも適用できるようで、Kubernetes Operator のインストールに使われる installplan が installed になるのを待機するにはこんな風に書けば良さそうです。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl wait --timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;90s --for&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;condition&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;installed installplan/name-of-installplan -n operators&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このあたりを組み合わせれば、Kubernetes Operator のインストール処理の完了を待機して後続処理を実装することができそうですね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;短いですが、さまざまなリソースの状態を待機できる &lt;code&gt;kubectl wait&lt;/code&gt; についてご紹介してみました。&lt;/p&gt;&#xA;&lt;p&gt;特に初期セットアップの自動化に役立つコマンドなのではないでしょうか？&lt;/p&gt;</description>
    </item>
    <item>
      <title>AKSユーザーがOpenShiftでクラスタのオートスケールを調べてみる</title>
      <link>https://blog.pokapu.jp/post/one-aks-user-explores-cluster-autoscale-with-openshift/</link>
      <pubDate>Tue, 28 Dec 2021 08:26:09 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/one-aks-user-explores-cluster-autoscale-with-openshift/</guid>
      <description>&lt;p&gt;AKS(Azure Kubernetes Services)は簡単な設定を入れるだけでクラスタのオートスケールが可能で便利ですが、あまり詳細なコントロールができない認識です。&lt;/p&gt;&#xA;&lt;p&gt;OpenShift だとマニフェストファイルでオートスケールを調整できるように見えるので、ちょっと調べてみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;openshift-環境の構築トライ&#34;&gt;OpenShift 環境の構築トライ&lt;/h2&gt;&#xA;&lt;p&gt;実物を知らずして進めるのも良くないと思い、構築の方もトライしました。&lt;/p&gt;&#xA;&lt;p&gt;色々試したポイントとして、OpenShift の 4 系は VM サイズが最低でも D8s_v3、最低 4 台立つようなので、サブスクリプションのクォータの調整をしてから対応を進めましょう。オートスケールを踏まえると、「Standard DSv3 ファミリ vCPUs」を 48 以上くらいにしておきたいです。「リージョンの vCPU の合計」の方もご確認を。&lt;/p&gt;&#xA;&lt;p&gt;サブスクリプションの準備が整ったら下記 URL の記事に従い、OpenShift 環境を構築します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/openshift/tutorial-create-cluster&#34;&gt;https://docs.microsoft.com/ja-jp/azure/openshift/tutorial-create-cluster&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;手順内で（省略可能）となっている部分については今回は省略してみました。&lt;/p&gt;&#xA;&lt;p&gt;クラスターが作成されるまでに通常約 35 分かかります。とのことです。気長に待ちましょう。&lt;/p&gt;&#xA;&lt;p&gt;下記を見るとクラスタへの接続方法が確認できます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/openshift/tutorial-connect-cluster#connect-to-the-cluster&#34;&gt;https://docs.microsoft.com/ja-jp/azure/openshift/tutorial-connect-cluster#connect-to-the-cluster&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;いろいろなビューがあって便利そうなので、こちらの画面も見つつ、ドキュメントを追ってみることにします。&lt;/p&gt;&#xA;&lt;h2 id=&#34;clusterautoscaler-の設定確認&#34;&gt;ClusterAutoscaler の設定確認&lt;/h2&gt;&#xA;&lt;p&gt;下記を参考に、ClusterAutoscaler の設定を見てみます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://access.redhat.com/documentation/ja-jp/openshift_container_platform/4.8/html/machine_management/configuring-clusterautoscaler&#34;&gt;https://access.redhat.com/documentation/ja-jp/openshift_container_platform/4.8/html/machine_management/configuring-clusterautoscaler&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;コマンドで設定する手順になっていますが、クラスターコンソールの「管理」→「クラスター設定」から、「Cluster Autoscaler」のところで設定することもできそうです。&lt;/p&gt;&#xA;&lt;p&gt;GPU ノードはお財布が辛いので、例えばこれくらいですかね？&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;autoscaling.openshift.io/v1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ClusterAutoscaler&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;podPriorityThreshold&lt;/span&gt;: -&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;resourceLimits&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;maxNodesTotal&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;cores&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;min&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;max&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;min&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;max&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;scaleDown&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;delayAfterAdd&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10m&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;delayAfterDelete&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5m&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;delayAfterFailure&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;30s&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;unneededTime&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;60s&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;resourceLimits で記載している値は AKS でも設定できなく無いかなと思うのですが、scaleDown の定義は気になりますね。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KubernetesのTaintにビビらない</title>
      <link>https://blog.pokapu.jp/post/dont-be-afraid-of-kubernetes-taint/</link>
      <pubDate>Fri, 15 Oct 2021 08:35:01 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/dont-be-afraid-of-kubernetes-taint/</guid>
      <description>&lt;p&gt;Kubernetes をやり始めたころ、登場する言葉の多さに絶望したことを覚えています。&#xA;特にこの「Taint」はびっくりしました、「汚す」ってどういうこと？&#xA;ちょっと解説してみます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ノードを汚すという行為&#34;&gt;ノードを汚すという行為&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl taint&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のようなコマンドを使うと、ノードに Taint をつける、つまりノードを汚すことになります。&lt;/p&gt;&#xA;&lt;p&gt;なんだかネガティブな感じですよね。&lt;/p&gt;&#xA;&lt;p&gt;ここで大事なことは、「Pod はキレイ好き！」ということです。&lt;/p&gt;&#xA;&lt;p&gt;Taint が設定されたノードでは、普通の Pod は「こんな汚い場所で立ち上がりたくない！」となります。&lt;/p&gt;&#xA;&lt;p&gt;Taint を活用するコマンドで&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl drain&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;というのがありますが、これを使うと Taint の作用等により Pod をノードから安全に追い出すことができ、ノードのメンテナンスが可能な状態になります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;汚れを許容する-toleration&#34;&gt;汚れを許容する Toleration&lt;/h2&gt;&#xA;&lt;p&gt;通常の Pod は完璧主義というか、あらゆる Taint を拒否します（たぶん）。&lt;/p&gt;&#xA;&lt;p&gt;でも、いつもすべてを清潔に保てるとは限りませんよね、例えば家の窓の掃除は結構妥協してたり・・・&lt;/p&gt;&#xA;&lt;p&gt;こういう、一部の Taint は気にしない、といった振る舞いを Pod にさせるために Toleration という概念があります。&lt;/p&gt;&#xA;&lt;p&gt;例えば Windows コンテナの Pod は Windows のノードでしか起動できないので、ノードに Windows 限定にする Taint をつけておき、Windows の Pod で Toleration を設定すれば良いことがありそうですね。&lt;/p&gt;&#xA;&lt;p&gt;（急にニッチな話題に・・・）&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;詳しいコマンドは解説しませんでしたが、「Taint」という概念については「Pod はキレイ好きだから汚れた場所にはいきたくない」という性格を覚えておくと、関連するドキュメントが一気に読みやすくなります。&lt;/p&gt;&#xA;&lt;p&gt;是非覚えておいてください。&lt;/p&gt;</description>
    </item>
    <item>
      <title>自作のWindowsアプリをAKSに載せるキホン技</title>
      <link>https://blog.pokapu.jp/post/get-started-with-windows-container-aks-easily/</link>
      <pubDate>Wed, 08 Apr 2020 21:07:42 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/get-started-with-windows-container-aks-easily/</guid>
      <description>&lt;p&gt;Azure Kubernetes Service(以降、AKS)は Windows コンテナの使用できる構成を作成することができます。&lt;/p&gt;&#xA;&lt;p&gt;（記事公開時点ではパブリックプレビュー）&lt;/p&gt;&#xA;&lt;p&gt;Windows コンテナが使える AKS を用意して、アプリを動かしてみましょう。&lt;/p&gt;&#xA;&lt;p&gt;アプリの作成からインフラの作成まで一通り必要な手順を書いてみましたので、この記事をベースに Windows コンテナの世界に入門していただけたらと思います。&lt;/p&gt;&#xA;&lt;p&gt;また、アプリ開発、コンテナ作成、AKS 作成を一通り記載しているので、例えばアプリ開発は知識があるけどインフラはちょっと・・・という場合に部分的に参照していただけると嬉しいです。&lt;/p&gt;&#xA;&lt;p&gt;Azure Cloud Shell とはなんぞや？などの細かい説明は省いていますので、適宜調べながら読み進めていただけたらと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;（Windows 環境でしか動作しない）アプリケーションを作成します&lt;/li&gt;&#xA;&lt;li&gt;アプリケーションを載せたコンテナイメージを作成します&lt;/li&gt;&#xA;&lt;li&gt;コンテナイメージをコンテナレジストリ（ACR）に格納します&lt;/li&gt;&#xA;&lt;li&gt;Windows コンテナが動作する AKS を作成します&lt;/li&gt;&#xA;&lt;li&gt;マニフェストファイルを使用して、AKS 上でコンテナを動かします&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;web-アプリの作成&#34;&gt;Web アプリの作成&lt;/h2&gt;&#xA;&lt;p&gt;【作業環境の想定：手元の Windows PC】&lt;/p&gt;&#xA;&lt;p&gt;Web 上に公開されているサンプルアプリを使っても良いんですが、現実は自社で作成したアプリなどを使用すると思うので、Web アプリの作成からサラッと見てみましょう。&lt;/p&gt;&#xA;&lt;p&gt;Windows コンテナが必要なケースは、Windows でしか動作しないアプリ、例えば.NET Framework のアプリを使用している場合だと思われます。.NET Framework の ASP.NET MVC アプリを作っておきましょう。&lt;/p&gt;&#xA;&lt;p&gt;下記サイトから Visual Studio のインストーラをダウンロードします。&#xA;&lt;a href=&#34;https://visualstudio.microsoft.com/ja/downloads/&#34;&gt;https://visualstudio.microsoft.com/ja/downloads/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;インストーラを起動し、「ASP.NET と Web 開発」を選択してインストールします。&lt;/p&gt;&#xA;&lt;p&gt;インストールが成功したら、新規プロジェクトを起動して、C#の ASP.NET MVC アプリを作成しましょう。&lt;/p&gt;&#xA;&lt;p&gt;ちょっと古めのアプリを載せる想定だと思いますので、.NET Framework は「4.5.2」辺りが良いでしょうか。プロジェクト名は適当で良いので、「MVC」のアプリを作成してください。&lt;/p&gt;&#xA;&lt;p&gt;アプリが作成されたら、Visual Studio のソリューションエクスプローラーから、Views/Home/Index.cshtml を開き、適当な加工を加えて実行してみてください。例えば下記のような感じでザックリいきましょう。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ViewBag.Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;コンテナアプリのデモ&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;div class=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jumbotron&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;h1&amp;gt;ASP.NET&amp;lt;/h1&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;p class=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lead&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;コンテナで&lt;/span&gt;Webアプリを動かしてみよう&amp;lt;/p&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;F5 キーでアプリの正常動作を確認したら、アプリケーションを発行しましょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dockerfileに出てくる謎のexe、ServiceMonitor</title>
      <link>https://blog.pokapu.jp/post/mysterious-exe-that-appears-in-dockerfile/</link>
      <pubDate>Mon, 03 Feb 2020 21:29:12 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/mysterious-exe-that-appears-in-dockerfile/</guid>
      <description>&lt;h2 id=&#34;dockerfile-の基本的な書き方&#34;&gt;Dockerfile の基本的な書き方&lt;/h2&gt;&#xA;&lt;p&gt;皆様、Windows コンテナで遊んでいますか？&lt;/p&gt;&#xA;&lt;p&gt;Dockerfile に書く内容は、誤解を恐れず表現すると、だいたい下記のような流れですよね。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ベースイメージ&lt;/li&gt;&#xA;&lt;li&gt;ミドルウェアのインストール、セットアップの処理&lt;/li&gt;&#xA;&lt;li&gt;アプリケーションのコピー&lt;/li&gt;&#xA;&lt;li&gt;アプリケーションの起動を監視するために ENTRYPOINT を記載&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;これだけ認識していれば、例えば単発実行や無限ループで処理待機するコンソールアプリケーションのコンテナ化なんてのは、（細かいことを無視すれば）すぐにできてしまうと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;謎の-exe-servicemonitor&#34;&gt;謎の exe 、ServiceMonitor&lt;/h2&gt;&#xA;&lt;p&gt;しかし、例えば下記の Dockerfile を見てください。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/dotnet-framework-docker/blob/7d120a3da56ea5279e1b54a8185530af056c7b33/4.8/aspnet/windowsservercore-ltsc2019/Dockerfile&#34;&gt;https://github.com/microsoft/dotnet-framework-docker/blob/7d120a3da56ea5279e1b54a8185530af056c7b33/4.8/aspnet/windowsservercore-ltsc2019/Dockerfile&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;これは IIS で動く Web アプリを動かすときに使える Dockerfile になるんですが、 ENTRYPOINT に ServiceMonitor.exe なるものが指定されています。&lt;/p&gt;&#xA;&lt;p&gt;「なにこれ」と思いませんでしたか？&lt;/p&gt;&#xA;&lt;p&gt;私は思いました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;そもそも-entrypoint-って何だっけ&#34;&gt;そもそも ENTRYPOINT って何だっけ&lt;/h2&gt;&#xA;&lt;p&gt;ENTRYPOINT は「コンテナが実行するファイルを設定します。」とのことです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://docs.docker.jp/v1.11/engine/reference/builder.html#entrypoint&#34;&gt;http://docs.docker.jp/v1.11/engine/reference/builder.html#entrypoint&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;そして、その「実行するファイル」が終了すると共に、コンテナが終了します。&lt;/p&gt;&#xA;&lt;p&gt;これを IIS で動かすアプリに当てはめるとどうなるでしょうか？&lt;/p&gt;&#xA;&lt;p&gt;IIS で動かすアプリは exe ファイルでは無いので、それ単体で実行することはできませんよね。IIS の上に載せてあげることで初めて動作します。&lt;/p&gt;&#xA;&lt;p&gt;ということは、IIS が ENTRYPOINT に記載すべきものとなります。&lt;/p&gt;&#xA;&lt;p&gt;しかし、 IIS 自体はサービスなので、「コンテナが実行するファイル」とは違う概念になります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;サービスの起動状態を監視するアプリが欲しい&#34;&gt;「サービスの起動状態を監視するアプリ」が欲しい&lt;/h2&gt;&#xA;&lt;p&gt;例えば、「コンテナが実行するファイル」が IIS というサービスの起動状態を監視してくれて、そのサービスの状態に従って終了してくれたら良さそうに思いませんか？&lt;/p&gt;&#xA;&lt;p&gt;そんな役割を担ってくれるのが ServiceMonitor.exe です。&lt;/p&gt;&#xA;&lt;p&gt;よって、IIS のようなサービスの状態がコンテナの起動状態を左右する場合は、 ServiceMonitor.exe を ENTRYPOINT に指定してあげればコンテナが実現できそうですね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;ServiceMonitor.exe のおかげて IIS アプリのコンテナが実現できることが分かりましたでしょうか？&#xA;広く公開されている Dockerfile は参考になるので、「これ何やってるんだろう？」を深堀してみると面白いですし、勉強になります。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
