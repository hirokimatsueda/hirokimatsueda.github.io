<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kubernetes on 備忘録</title>
    <link>https://hirokimatsueda.github.io/categories/kubernetes/</link>
    <description>Recent content in Kubernetes on 備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright © 2022 Hiroki Matsueda</copyright>
    <lastBuildDate>Wed, 18 Jan 2023 20:55:17 +0900</lastBuildDate><atom:link href="https://hirokimatsueda.github.io/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kubectl waitでいろいろ待ってみよう</title>
      <link>https://hirokimatsueda.github.io/post/lets-wait-for-various-things-with-kubectl-wait/</link>
      <pubDate>Wed, 18 Jan 2023 20:55:17 +0900</pubDate>
      
      <guid>https://hirokimatsueda.github.io/post/lets-wait-for-various-things-with-kubectl-wait/</guid>
      <description>Kubernetes はマニフェストファイルを用いて状態を定義することで、思い描く環境を作ることができるのが便利ですよね。
ただ、ある一定の前提を満たさないと状態が定義できない時があります。
例えば namespace が事前に存在していないと、その名前空間にはリソースが作れません。
namespace の場合は kubectl create namespace を実行してからほかの作業を実施するような順次実行をすることで解決できますね。
これで解決しないとき、例えば Kubernetes Operator のインストール完了を待機したい場合はどうすると良いでしょうか？
kubectl wait で作業完了を待機 kubectl wait というコマンドがあります。
https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#wait
このコマンドは、リソースの状態が指定した状態になるのを待機してくれます。
分かりやすい話だと例えば、deployment が available になるのを待機するには下記のように記載します。
kubectl wait --timeout=90s --for=condition=available deployment/name-of-deployment timeout の指定により、90 秒以内に状態が変わらなければ諦めます。
こちらは deployment 以外にも適用できるようで、Kubernetes Operator のインストールに使われる installplan が installed になるのを待機するにはこんな風に書けば良さそうです。
kubectl wait --timeout=90s --for=condition=installed installplan/name-of-installplan -n operators このあたりを組み合わせれば、Kubernetes Operator のインストール処理の完了を待機して後続処理を実装することができそうですね。
まとめ 短いですが、さまざまなリソースの状態を待機できる kubectl wait についてご紹介してみました。
特に初期セットアップの自動化に役立つコマンドなのではないでしょうか？</description>
    </item>
    
    <item>
      <title>AKSユーザーがOpenShiftでクラスタのオートスケールを調べてみる</title>
      <link>https://hirokimatsueda.github.io/post/one-aks-user-explores-cluster-autoscale-with-openshift/</link>
      <pubDate>Tue, 28 Dec 2021 08:26:09 +0900</pubDate>
      
      <guid>https://hirokimatsueda.github.io/post/one-aks-user-explores-cluster-autoscale-with-openshift/</guid>
      <description>AKS(Azure Kubernetes Services)は簡単な設定を入れるだけでクラスタのオートスケールが可能で便利ですが、あまり詳細なコントロールができない認識です。
OpenShift だとマニフェストファイルでオートスケールを調整できるように見えるので、ちょっと調べてみました。
OpenShift 環境の構築トライ 実物を知らずして進めるのも良くないと思い、構築の方もトライしました。
色々試したポイントとして、OpenShift の 4 系は VM サイズが最低でも D8s_v3、最低 4 台立つようなので、サブスクリプションのクォータの調整をしてから対応を進めましょう。オートスケールを踏まえると、「Standard DSv3 ファミリ vCPUs」を 48 以上くらいにしておきたいです。「リージョンの vCPU の合計」の方もご確認を。
サブスクリプションの準備が整ったら下記 URL の記事に従い、OpenShift 環境を構築します。
https://docs.microsoft.com/ja-jp/azure/openshift/tutorial-create-cluster
手順内で（省略可能）となっている部分については今回は省略してみました。
クラスターが作成されるまでに通常約 35 分かかります。とのことです。気長に待ちましょう。
下記を見るとクラスタへの接続方法が確認できます。
https://docs.microsoft.com/ja-jp/azure/openshift/tutorial-connect-cluster#connect-to-the-cluster
いろいろなビューがあって便利そうなので、こちらの画面も見つつ、ドキュメントを追ってみることにします。
ClusterAutoscaler の設定確認 下記を参考に、ClusterAutoscaler の設定を見てみます。
https://access.redhat.com/documentation/ja-jp/openshift_container_platform/4.8/html/machine_management/configuring-clusterautoscaler
コマンドで設定する手順になっていますが、クラスターコンソールの「管理」→「クラスター設定」から、「Cluster Autoscaler」のところで設定することもできそうです。
GPU ノードはお財布が辛いので、例えばこれくらいですかね？
apiVersion: &amp;#34;autoscaling.openshift.io/v1&amp;#34; kind: &amp;#34;ClusterAutoscaler&amp;#34; metadata:  name: &amp;#34;default&amp;#34; spec:  podPriorityThreshold: -10  resourceLimits:  maxNodesTotal: 24  cores:  min: 8  max: 128  memory:  min: 4  max: 256  scaleDown:  enabled: true  delayAfterAdd: 10m  delayAfterDelete: 5m  delayAfterFailure: 30s  unneededTime: 60s resourceLimits で記載している値は AKS でも設定できなく無いかなと思うのですが、scaleDown の定義は気になりますね。</description>
    </item>
    
    <item>
      <title>KubernetesのTaintにビビらない</title>
      <link>https://hirokimatsueda.github.io/post/dont-be-afraid-of-kubernetes-taint/</link>
      <pubDate>Fri, 15 Oct 2021 08:35:01 +0900</pubDate>
      
      <guid>https://hirokimatsueda.github.io/post/dont-be-afraid-of-kubernetes-taint/</guid>
      <description>Kubernetes をやり始めたころ、登場する言葉の多さに絶望したことを覚えています。 特にこの「Taint」はびっくりしました、「汚す」ってどういうこと？ ちょっと解説してみます。
ノードを汚すという行為 kubectl taint のようなコマンドを使うと、ノードに Taint をつける、つまりノードを汚すことになります。
なんだかネガティブな感じですよね。
ここで大事なことは、「Pod はキレイ好き！」ということです。
Taint が設定されたノードでは、普通の Pod は「こんな汚い場所で立ち上がりたくない！」となります。
Taint を活用するコマンドで
kubectl drain というのがありますが、これを使うと Taint の作用等により Pod をノードから安全に追い出すことができ、ノードのメンテナンスが可能な状態になります。
汚れを許容する Toleration 通常の Pod は完璧主義というか、あらゆる Taint を拒否します（たぶん）。
でも、いつもすべてを清潔に保てるとは限りませんよね、例えば家の窓の掃除は結構妥協してたり・・・
こういう、一部の Taint は気にしない、といった振る舞いを Pod にさせるために Toleration という概念があります。
例えば Windows コンテナの Pod は Windows のノードでしか起動できないので、ノードに Windows 限定にする Taint をつけておき、Windows の Pod で Toleration を設定すれば良いことがありそうですね。
（急にニッチな話題に・・・）
まとめ 詳しいコマンドは解説しませんでしたが、「Taint」という概念については「Pod はキレイ好きだから汚れた場所にはいきたくない」という性格を覚えておくと、関連するドキュメントが一気に読みやすくなります。
是非覚えておいてください。</description>
    </item>
    
    <item>
      <title>自作のWindowsアプリをAKSに載せるキホン技</title>
      <link>https://hirokimatsueda.github.io/post/get-started-with-windows-container-aks-easily/</link>
      <pubDate>Wed, 08 Apr 2020 21:07:42 +0900</pubDate>
      
      <guid>https://hirokimatsueda.github.io/post/get-started-with-windows-container-aks-easily/</guid>
      <description>Azure Kubernetes Service(以降、AKS)は Windows コンテナの使用できる構成を作成することができます。
（記事公開時点ではパブリックプレビュー）
Windows コンテナが使える AKS を用意して、アプリを動かしてみましょう。
アプリの作成からインフラの作成まで一通り必要な手順を書いてみましたので、この記事をベースに Windows コンテナの世界に入門していただけたらと思います。
また、アプリ開発、コンテナ作成、AKS 作成を一通り記載しているので、例えばアプリ開発は知識があるけどインフラはちょっと・・・という場合に部分的に参照していただけると嬉しいです。
Azure Cloud Shell とはなんぞや？などの細かい説明は省いていますので、適宜調べながら読み進めていただけたらと思います。
概要  （Windows 環境でしか動作しない）アプリケーションを作成します アプリケーションを載せたコンテナイメージを作成します コンテナイメージをコンテナレジストリ（ACR）に格納します Windows コンテナが動作する AKS を作成します マニフェストファイルを使用して、AKS 上でコンテナを動かします  Web アプリの作成 【作業環境の想定：手元の Windows PC】
Web 上に公開されているサンプルアプリを使っても良いんですが、現実は自社で作成したアプリなどを使用すると思うので、Web アプリの作成からサラッと見てみましょう。
Windows コンテナが必要なケースは、Windows でしか動作しないアプリ、例えば.NET Framework のアプリを使用している場合だと思われます。.NET Framework の ASP.NET MVC アプリを作っておきましょう。
下記サイトから Visual Studio のインストーラをダウンロードします。 https://visualstudio.microsoft.com/ja/downloads/
インストーラを起動し、「ASP.NET と Web 開発」を選択してインストールします。
インストールが成功したら、新規プロジェクトを起動して、C#の ASP.NET MVC アプリを作成しましょう。
ちょっと古めのアプリを載せる想定だと思いますので、.NET Framework は「4.5.2」辺りが良いでしょうか。プロジェクト名は適当で良いので、「MVC」のアプリを作成してください。
アプリが作成されたら、Visual Studio のソリューションエクスプローラーから、Views/Home/Index.cshtml を開き、適当な加工を加えて実行してみてください。例えば下記のような感じでザックリいきましょう。</description>
    </item>
    
    <item>
      <title>Dockerfileに出てくる謎のexe、ServiceMonitor</title>
      <link>https://hirokimatsueda.github.io/post/mysterious-exe-that-appears-in-dockerfile/</link>
      <pubDate>Mon, 03 Feb 2020 21:29:12 +0900</pubDate>
      
      <guid>https://hirokimatsueda.github.io/post/mysterious-exe-that-appears-in-dockerfile/</guid>
      <description>Dockerfile の基本的な書き方 皆様、Windows コンテナで遊んでいますか？
Dockerfile に書く内容は、誤解を恐れず表現すると、だいたい下記のような流れですよね。
 ベースイメージ ミドルウェアのインストール、セットアップの処理 アプリケーションのコピー アプリケーションの起動を監視するために ENTRYPOINT を記載  これだけ認識していれば、例えば単発実行や無限ループで処理待機するコンソールアプリケーションのコンテナ化なんてのは、（細かいことを無視すれば）すぐにできてしまうと思います。
謎の exe 、ServiceMonitor しかし、例えば下記の Dockerfile を見てください。
https://github.com/microsoft/dotnet-framework-docker/blob/7d120a3da56ea5279e1b54a8185530af056c7b33/4.8/aspnet/windowsservercore-ltsc2019/Dockerfile
これは IIS で動く Web アプリを動かすときに使える Dockerfile になるんですが、 ENTRYPOINT に ServiceMonitor.exe なるものが指定されています。
「なにこれ」と思いませんでしたか？
私は思いました。
そもそも ENTRYPOINT って何だっけ ENTRYPOINT は「コンテナが実行するファイルを設定します。」とのことです。
http://docs.docker.jp/v1.11/engine/reference/builder.html#entrypoint
そして、その「実行するファイル」が終了すると共に、コンテナが終了します。
これを IIS で動かすアプリに当てはめるとどうなるでしょうか？
IIS で動かすアプリは exe ファイルでは無いので、それ単体で実行することはできませんよね。IIS の上に載せてあげることで初めて動作します。
ということは、IIS が ENTRYPOINT に記載すべきものとなります。
しかし、 IIS 自体はサービスなので、「コンテナが実行するファイル」とは違う概念になります。
「サービスの起動状態を監視するアプリ」が欲しい 例えば、「コンテナが実行するファイル」が IIS というサービスの起動状態を監視してくれて、そのサービスの状態に従って終了してくれたら良さそうに思いませんか？
そんな役割を担ってくれるのが ServiceMonitor.exe です。
よって、IIS のようなサービスの状態がコンテナの起動状態を左右する場合は、 ServiceMonitor.exe を ENTRYPOINT に指定してあげればコンテナが実現できそうですね。</description>
    </item>
    
  </channel>
</rss>
