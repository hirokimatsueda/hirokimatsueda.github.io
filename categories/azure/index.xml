<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure on 備忘録</title>
    <link>https://blog.pokapu.jp/categories/azure/</link>
    <description>Recent content in Azure on 備忘録</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <copyright>Copyright © 2022 Hiroki Matsueda</copyright>
    <lastBuildDate>Sat, 19 Aug 2023 09:27:34 +0900</lastBuildDate>
    <atom:link href="https://blog.pokapu.jp/categories/azure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Application Insightsでお手軽にお安く？HTTP監視しよう</title>
      <link>https://blog.pokapu.jp/post/easy-http-monitoring-with-application-insights/</link>
      <pubDate>Sat, 19 Aug 2023 09:27:34 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/easy-http-monitoring-with-application-insights/</guid>
      <description>&lt;p&gt;皆さんはパブリックに公開したシステムの正常稼働をどのように監視していますか？&lt;/p&gt;&#xA;&lt;p&gt;私は趣味でレンタルサーバーを常時動かしているのですが、HTTP 監視を行い不具合の検出をすぐに行えるようにしています。&lt;/p&gt;&#xA;&lt;p&gt;監視には Azure の Application Insights を利用しており、利用料金も私の使い方であれば格安ですので、こちらをご紹介したいと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;http-監視とは&#34;&gt;HTTP 監視とは？&lt;/h2&gt;&#xA;&lt;p&gt;HTTP 監視とは、監視対象に対して定期的に HTTP のリクエストを送信し、その応答（200 応答するか？など）を確認する監視方法です。&lt;/p&gt;&#xA;&lt;p&gt;サーバー内部の不具合までは見られませんが、サーバーが落ちていないなど、ある程度の正常稼働を認識することができます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;application-insights-による-http-監視&#34;&gt;Application Insights による HTTP 監視&lt;/h2&gt;&#xA;&lt;p&gt;Azure の Application Insights を利用すると、お手軽に HTTP 監視を構成できます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/ja-jp/azure/azure-monitor/app/availability-overview&#34;&gt;可用性テスト&lt;/a&gt;という名称です。&lt;/p&gt;&#xA;&lt;p&gt;Application Insights を構築し、Azure ポータルから「可用性」の画面を開くと設定を追加できます。&lt;/p&gt;&#xA;&lt;p&gt;「クラシックテスト」と「標準テスト」が存在しますが、「標準テスト」で実現することになります。&lt;/p&gt;&#xA;&lt;p&gt;（Azure で「クラシック」と名の付くものは廃止されていく運命にあることが多いです）&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/ja-jp/azure/azure-monitor/app/availability-standard-tests&#34;&gt;標準テストのドキュメント&lt;/a&gt;に沿って設定してみましょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;application-insights-の構築設定時のポイント&#34;&gt;Application Insights の構築・設定時のポイント&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Application Insights の構築時に 2023/08/19 現在は「リソース モード」の選択がありますが、「クラシック」ではなく「ワークスペースベース」を選択します。クラシックは廃止予定の構成です。&lt;/li&gt;&#xA;&lt;li&gt;URL にはポート番号の指定も可能ですので、通常のポート（HTTPS なら 443 とか）以外に対してもテストできます&lt;/li&gt;&#xA;&lt;li&gt;東日本リージョンの Application Insights の場合、&lt;a href=&#34;https://azure.microsoft.com/ja-jp/pricing/details/monitor/#pricing&#34;&gt;テスト 1 回につき &lt;code&gt;$0.0008&lt;/code&gt; のコスト&lt;/a&gt;なので、要件に合わせて「テストの頻度」と「テストの場所」の数を調整しましょう&lt;/li&gt;&#xA;&lt;li&gt;警告を「有効」にして&lt;a href=&#34;https://learn.microsoft.com/ja-jp/azure/azure-monitor/app/availability-alerts&#34;&gt;追加の設定&lt;/a&gt;を入れ込むことで、HTTP 応答に問題があった際にメール通知等ができます&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;趣味程度の使い方の場合の料金は&#34;&gt;趣味程度の使い方の場合の料金は？&lt;/h2&gt;&#xA;&lt;p&gt;趣味程度のサーバーなので、テストの頻度を 15 分毎、テストの場所を Japan East にしていますが、1 日当たり &lt;code&gt;8.90円&lt;/code&gt; (2023/07 実績)となっていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ストレージアカウントのPremiumな選択肢を覚えてみる</title>
      <link>https://blog.pokapu.jp/post/learn-about-premium-options-for-storage-accounts/</link>
      <pubDate>Fri, 28 Jul 2023 09:31:03 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/learn-about-premium-options-for-storage-accounts/</guid>
      <description>&lt;p&gt;皆さん、Azure の Premium なオプションはどれくらい使えていますか？&lt;/p&gt;&#xA;&lt;p&gt;私は WebApps と SQL Database がぱっと頭に浮かびますが、よく考えるといろいろありますよね。&lt;/p&gt;&#xA;&lt;p&gt;Microsoft Learn を参考に、ストレージアカウントの選択可能なオプションを覚えるため整理してみたいと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ストレージ-アカウントの種類&#34;&gt;ストレージ アカウントの種類&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/ja-jp/training/modules/design-data-storage-solution-for-non-relational-data/3-design-for-azure-storage-accounts&#34;&gt;https://learn.microsoft.com/ja-jp/training/modules/design-data-storage-solution-for-non-relational-data/3-design-for-azure-storage-accounts&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Azure ポータルからデフォルト設定で構築していくと、「Standard 汎用 v2」が選択されると思います。&lt;/p&gt;&#xA;&lt;p&gt;こちらを使えば、よくある Web サイト等を動かすには十分な性能のものが利用でき、安価にデータを保管できます。&lt;/p&gt;&#xA;&lt;p&gt;必要に応じて CDN などの他のサービスも組み合わせますかね。&lt;/p&gt;&#xA;&lt;p&gt;これに対し、「Standard 汎用 v2」以外には下記の Premium なオプションがあります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Premium ブロック BLOB&lt;/li&gt;&#xA;&lt;li&gt;Premium ファイル共有&lt;/li&gt;&#xA;&lt;li&gt;Premium ページ BLOB&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;「Standard 汎用 v2」の場合、Blob Storage (Data Lake Storage を含む)、Queue Storage、Table Storage、Azure Files の 4 つのサービスが提供されますが、上記の Premium なオプションを利用した場合は特定のサービスにサポートが限定されます。&lt;/p&gt;&#xA;&lt;p&gt;各オプションについて、高いスループット以外のドキュメント上で気になるところをピックアップしていきます。&lt;/p&gt;&#xA;&lt;p&gt;（2023/7/28 時点のドキュメントからピックアップ）&lt;/p&gt;&#xA;&lt;h3 id=&#34;premium-ブロック-blob&#34;&gt;Premium ブロック BLOB&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高速の一貫した応答時間を要するワークロードや、小さな読み書きが大量に行われるワークロードに適している&lt;/li&gt;&#xA;&lt;li&gt;コスト効率で言うと、トランザクションコストが低く設定されており、使用方法によっては「Standard 汎用 v2」よりも安くなる場合も考えられる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;premium-ファイル共有&#34;&gt;Premium ファイル共有&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;サーバー メッセージ ブロック (SMB) と NFS ファイル共有の両方をサポートする必要がある場合に利用&lt;/li&gt;&#xA;&lt;li&gt;最大同時要求レートは 100,000 IOPS で、Standard の 20,000 IOPS よりはるかに高い&lt;/li&gt;&#xA;&lt;li&gt;ストレージアカウントの最大容量は(100TiB)で、Standard の 5PiB より小さい&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;premium-ページ-blob&#34;&gt;Premium ページ BLOB&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;BLOB あたり最大 7,500 IOPS と 250MBps のプロビジョニングされたディスク パフォーマンスを提供&lt;/li&gt;&#xA;&lt;li&gt;サイズは固定で最大 8TB&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;補足blob-のアクセス層&#34;&gt;補足：Blob のアクセス層&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/ja-jp/training/modules/design-data-storage-solution-for-non-relational-data/5-design-for-azure-blob-storage&#34;&gt;https://learn.microsoft.com/ja-jp/training/modules/design-data-storage-solution-for-non-relational-data/5-design-for-azure-blob-storage&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Terraformを使ってAKS上にFluxを導入する手順とデモ</title>
      <link>https://blog.pokapu.jp/post/deploy-flux-on-aks-with-terraform/</link>
      <pubDate>Thu, 06 Jul 2023 09:36:15 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/deploy-flux-on-aks-with-terraform/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;GitOps は、開発者がコードを Git リポジトリにプッシュすることで自動的にインフラストラクチャーが更新される仕組みです。&lt;/p&gt;&#xA;&lt;p&gt;Flux は、GitOps を実現するためのツールであり、Kubernetes の manifest ファイルを Git リポジトリに保存し、変更があるたびに自動でデプロイすることができます。&lt;/p&gt;&#xA;&lt;p&gt;本記事では、Terraform を用いて AKS 上に Flux を導入する手順を説明し、GitOps のデモを行います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;aks-上に-flux-を導入する手順&#34;&gt;AKS 上に Flux を導入する手順&lt;/h2&gt;&#xA;&lt;h3 id=&#34;連携先の-github-リポジトリの準備&#34;&gt;連携先の GitHub リポジトリの準備&lt;/h3&gt;&#xA;&lt;p&gt;GitHub リポジトリが空だと Terraform の実行時にエラーになるため、main ブランチに readme か何かを入れておいてください。&lt;/p&gt;&#xA;&lt;p&gt;続いて GitHub との認証情報の準備です。&#xA;今回は Deploy key を用いて Flux から GitHub に接続する方針で説明します。&lt;/p&gt;&#xA;&lt;p&gt;Deploy key の作成方法は下記です。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;接続に使用する SSH キーを生成します&#xA;&lt;ul&gt;&#xA;&lt;li&gt;参考：&lt;a href=&#34;https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key&#34;&gt;https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;対象のリポジトリの「Setting」から、「Deploy keys」を開きます&lt;/li&gt;&#xA;&lt;li&gt;「Add deploy key」をクリックします&lt;/li&gt;&#xA;&lt;li&gt;Title に任意の名称を設定し、SSH キーの公開鍵をコピペし、「Allow write access」のチェックを入れて「Add key」します&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;SSH キーの秘密鍵は Terraform の実行時に必要になります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;aks-と-flux-の導入&#34;&gt;AKS と Flux の導入&lt;/h2&gt;&#xA;&lt;p&gt;AKS の作成と Flux の導入は Terraform で実現しましょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azureお父さん必見！赤ちゃんのうんち記録アプリで子育てをDX！?</title>
      <link>https://blog.pokapu.jp/post/baby-info-recording-system/</link>
      <pubDate>Fri, 02 Dec 2022 10:00:00 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/baby-info-recording-system/</guid>
      <description>&lt;p&gt;※ この記事は、cloud.config Tech Blog にもマルチポストする予定です&lt;/p&gt;&#xA;&lt;p&gt;子供が産まれて妻子の入院期間中、体温や授乳回数やおしっこ・うんちの時間を記録する紙があって、そこに毎日記録していました。&lt;/p&gt;&#xA;&lt;p&gt;退院後もそのフォーマットを Excel で真似て紙に印刷して使っていて、子供の不調が無いか確認していました。&lt;/p&gt;&#xA;&lt;p&gt;子供が 1 歳になった今も一応、記録内容を減らした紙を運用してはいるものの、ほとんど問題ないのであまり書いていないです。&lt;/p&gt;&#xA;&lt;p&gt;ただその中で、絶対書いておきたいのが、&lt;/p&gt;&#xA;&lt;p&gt;うんちの記録です！&lt;/p&gt;&#xA;&lt;p&gt;便秘だと不機嫌になったり場合によっては病院に行かないといけなくなります。&lt;/p&gt;&#xA;&lt;p&gt;うちの子は最近は割と快便ですが、最初の頃は便秘でとても心配しました。&lt;/p&gt;&#xA;&lt;p&gt;また、うんちがあまり出ていない状態でお風呂に入ると・・・ね。。&lt;/p&gt;&#xA;&lt;p&gt;ということで、うんちの回数を記録するアプリを書いてみましたのでご紹介です。&lt;/p&gt;&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.pokapu.jp/css/hugo-easy-gallery.css&#34; /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/baby-info-recording-system/001.png&#34; alt=&#34;/baby-info-recording-system/001.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/baby-info-recording-system/001.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Screen shot&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;アプリの概要&#34;&gt;アプリの概要&lt;/h2&gt;&#xA;&lt;p&gt;カレンダーの中の「＋」ボタンを押すと、当日の枠に 💩 マークがつきます。&lt;/p&gt;&#xA;&lt;p&gt;データは Cosmos DB に保管されます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アプリコード&#34;&gt;アプリコード&lt;/h2&gt;&#xA;&lt;p&gt;Visual Studio 2022 で作成しました。GitHub で見れるようにしています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/baby-info-recording-system&#34;&gt;https://github.com/hirokimatsueda/baby-info-recording-system&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;フロントアプリの実装は大目に見てください。。&lt;/p&gt;&#xA;&lt;p&gt;フロントの作りが微妙ですが・・・赤ちゃん ID を変更すると別々のデータを管理できるので、双子や兄弟のデータも扱えます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アーキテクチャ概要&#34;&gt;アーキテクチャ概要&lt;/h2&gt;&#xA;&lt;p&gt;インフラとしては Azure の Static Web Apps での動作を想定し、情報を CosmosDB に保存するので、比較的安価に運用できるものになっています。&lt;/p&gt;&#xA;&lt;p&gt;アプリは &lt;a href=&#34;https://learn.microsoft.com/ja-jp/aspnet/core/blazor/?view=aspnetcore-6.0&#34;&gt;ASP.NET Core Blazor&lt;/a&gt; での記述です。&lt;/p&gt;&#xA;&lt;p&gt;インフラもアプリも、ベースとなる考え方は以前ブログでご紹介した下記のコードです。&#xA;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;インフラ構築&#34;&gt;インフラ構築&lt;/h2&gt;&#xA;&lt;p&gt;Api は Static Web Apps のデフォルトの機能で動かすと Managed ID が使えないため、Static Web Apps とは別で構築した Functions を Static Web Apps にリンクする形を取るのがポイントです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>実用性重視！AzureのマネージドID活用のサンプルコード(アプリコード)</title>
      <link>https://blog.pokapu.jp/post/azure-managed-id-sample-application/</link>
      <pubDate>Sat, 20 Aug 2022 14:50:39 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/azure-managed-id-sample-application/</guid>
      <description>&lt;p&gt;下記のサンプル実装のアプリコード部分を解説します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;アプリ処理詳細&#34;&gt;アプリ処理詳細&lt;/h2&gt;&#xA;&lt;p&gt;コードはこちら:&#xA;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample/blob/main/applications/DataApis&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample/blob/main/applications/DataApis&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;詳細と言うほどのものではないですが・・・。&lt;/p&gt;&#xA;&lt;h3 id=&#34;getdata&#34;&gt;GetData&lt;/h3&gt;&#xA;&lt;p&gt;リクエストパラメータから &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;category&lt;/code&gt; を読み取って、対象のデータを Cosmos DB から取得し返却します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;putdata&#34;&gt;PutData&lt;/h3&gt;&#xA;&lt;p&gt;リクエストボディのデータを Cosmos DB に Upsert します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;実装のポイント&#34;&gt;実装のポイント&lt;/h2&gt;&#xA;&lt;p&gt;マネージド ID という観点で言うと、CosmosClient に渡すクレデンシャル情報に &lt;code&gt;new DefaultAzureCredential()&lt;/code&gt; を指定するくらいです。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; CosmosClient InitializeCosmosClient()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CosmosClient(Environment.GetEnvironmentVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COSMOS_ENDPOINT&amp;#34;&lt;/span&gt;, EnvironmentVariableTarget.Process), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DefaultAzureCredential());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これにより Functions 上ではマネージド ID のクレデンシャルが使用されます。&lt;/p&gt;&#xA;&lt;p&gt;ローカル PC 上で実行する場合は、ローカル PC 上の認証情報を使用してくれるので、例えば az login したユーザーが Cosmos DB のデータへのアクセス権限を持っていればローカル PC でデバッグが可能です。&lt;/p&gt;&#xA;&lt;p&gt;ほかのポイントとしては、CosmosClient をメソッド呼び出し時に生成するのではなく Static 変数として持っておき、Lazy クラスを活用した初期化を実施しています。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Lazy&amp;lt;CosmosClient&amp;gt; lazyClient = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Lazy&amp;lt;CosmosClient&amp;gt;(InitializeCosmosClient);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これにより CosmosClient の初期化というコストの高い処理回数を削減しています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;アプリ開発のポイントを整理しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>実用性重視！AzureのマネージドID活用のサンプルコード(インフラコード)</title>
      <link>https://blog.pokapu.jp/post/azure-managed-id-sample-infrastructure/</link>
      <pubDate>Sat, 20 Aug 2022 14:50:38 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/azure-managed-id-sample-infrastructure/</guid>
      <description>&lt;p&gt;下記のサンプル実装のインフラコード部分を解説します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;インフラ構成詳細&#34;&gt;インフラ構成詳細&lt;/h2&gt;&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.pokapu.jp/css/hugo-easy-gallery.css&#34; /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/azure-managed-id-sample-infrastructure/001.png&#34; alt=&#34;/azure-managed-id-sample-infrastructure/001.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/azure-managed-id-sample-infrastructure/001.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Architecture&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;概要記事で「シンプル」と表現しましたが、構築されるリソースを明記すると若干インパクトがあるかもしれません。&#xA;しかしかなり最低限だと思いますのでどうかお付き合いを・・・。&lt;/p&gt;&#xA;&lt;p&gt;本質的に必要なのは、中央の Functions と Cosmos DB です。&lt;/p&gt;&#xA;&lt;p&gt;Cosmos DB の中にはデータベースやコンテナーの概念があるので、これらもインフラ構築時に作成してしまいます。&lt;/p&gt;&#xA;&lt;p&gt;Azure のリソースは「診断設定」を設定するとリソースの状態が観測できるので、Functions と Cosmos DB に対して設定しておきます。診断ログの保管先として Log Analytics を指定しています。&lt;/p&gt;&#xA;&lt;p&gt;Functions のアプリの状態の観測のため、Application Insights と接続しています。&lt;/p&gt;&#xA;&lt;p&gt;Functions ではシステム割り当てマネージド ID を有効にして、Cosmos DB の権限設定でこのマネージド ID が Cosmos DB 内のデータを操作することを許可します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;terraform-を用いた構築&#34;&gt;terraform を用いた構築&lt;/h2&gt;&#xA;&lt;p&gt;コードはこちら:&#xA;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample/tree/main/infrastructure/terraform&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample/tree/main/infrastructure/terraform&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Azure のインフラ構築には &lt;a href=&#34;https://www.terraform.io/&#34;&gt;terraform&lt;/a&gt; を利用しています。&lt;/p&gt;&#xA;&lt;p&gt;terraform についての説明は割愛させていただき、どのような方針で実装しているかを記載します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;module-への処理の分割&#34;&gt;module への処理の分割&lt;/h3&gt;&#xA;&lt;p&gt;terraform は、カレントディレクトリ配下（サブディレクトリを除く）の tf ファイルをすべて確認してインフラ構築をしてくれますが、リソース数が多い場合はコードの見通しが悪くなりがちです。&lt;/p&gt;&#xA;&lt;p&gt;この時、&lt;a href=&#34;https://www.terraform.io/language/modules&#34;&gt;modules&lt;/a&gt; という概念を使用すると処理の詳細を別フォルダに整理できるので見通しが良くなります。&lt;/p&gt;&#xA;&lt;h3 id=&#34;マネージド-id-への権限付与&#34;&gt;マネージド ID への権限付与&lt;/h3&gt;&#xA;&lt;p&gt;下記の実装で権限付与を行っています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample/blob/main/infrastructure/terraform/modules/cosmos_db_sql/main.tf&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample/blob/main/infrastructure/terraform/modules/cosmos_db_sql/main.tf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/cosmosdb_sql_role_definition&#34;&gt;azurerm_cosmosdb_sql_role_definition&lt;/a&gt; を使用し、Cosmos DB のデータへのアクセス権限を定義します。&lt;/p&gt;&#xA;&lt;p&gt;これはアクセス権限の定義であり、割り当てではないです。&lt;/p&gt;&#xA;&lt;p&gt;割り当てには &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/cosmosdb_sql_role_assignment&#34;&gt;azurerm_cosmosdb_sql_role_assignment&lt;/a&gt; を使用しています。&lt;/p&gt;&#xA;&lt;p&gt;サンプルコードでは 2 回登場しますが、&lt;code&gt;user&lt;/code&gt;と名付けた方は terraform を実行した人への権限付与、&lt;code&gt;data_contributor&lt;/code&gt;と名付けた方は Functions への権限不要になります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>実用性重視！AzureのマネージドID活用のサンプルコード(概要)</title>
      <link>https://blog.pokapu.jp/post/azure-managed-id-sample-summary/</link>
      <pubDate>Sat, 20 Aug 2022 14:50:37 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/azure-managed-id-sample-summary/</guid>
      <description>&lt;p&gt;Azure のマネージド ID は分かれば非常に有用な概念なのですが、いざ実装するとなった場合、インフラとアプリケーションが密接に関わっていることもあってハードルが高く思うケースがあると思います。&lt;/p&gt;&#xA;&lt;p&gt;そんな皆様のために、いつもの当たり障りのない記事ではなく、しっかり実用的に使えるコードを用意しました。&lt;/p&gt;&#xA;&lt;p&gt;早速全体像をご紹介します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;サンプルコードの概要&#34;&gt;サンプルコードの概要&lt;/h2&gt;&#xA;&lt;p&gt;コードは下記にあります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;何らかのデータを Functions を経由して Cosmos DB に保管・取得するアプリとインフラのコードのサンプルです。&lt;/p&gt;&#xA;&lt;p&gt;データは少なくとも id と category の値を持つことを想定します。こんな感じで。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc123&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;category&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aaaabbbbcccc&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;category は Cosmos DB 上のパーティションキーとして設定しますので、一定の法則で値が入ると良いことがありそうですね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アーキテクチャ&#34;&gt;アーキテクチャ&lt;/h2&gt;&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.pokapu.jp/css/hugo-easy-gallery.css&#34; /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/azure-managed-id-sample-summary/001.png&#34; alt=&#34;/azure-managed-id-sample-summary/001.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/azure-managed-id-sample-summary/001.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Architecture&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;ユーザーからのリクエストを Functions で受け取り、Cosmos DB とデータのやり取りをするシンプルな構成です。&lt;/p&gt;&#xA;&lt;p&gt;Functions の認証は Functions の webbook の API キーを利用します。&lt;/p&gt;&#xA;&lt;p&gt;Functions から Cosmos DB にアクセスする手段は様々なものがありますが、表題の通りマネージド ID を使用を想定しています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;コードの構成&#34;&gt;コードの構成&lt;/h2&gt;&#xA;&lt;p&gt;applications フォルダに Functions 上で動作する C#のアプリケーションがあり、infrastructure フォルダに Azure リソースを構築するための terraform のコードがあります。&lt;/p&gt;&#xA;&lt;p&gt;infrastructure フォルダの terraform を実行して Azure 上に Functions と Cosmos DB、その他関連リソースを作成した後、applications フォルダのアプリを Functions にデプロイすればアプリにアクセス可能になります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Static Web AppsのAPIでマネージドIDを使う方法</title>
      <link>https://blog.pokapu.jp/post/how-to-use-a-managed-id-with-the-static-web-apps-api/</link>
      <pubDate>Tue, 12 Apr 2022 11:34:24 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/how-to-use-a-managed-id-with-the-static-web-apps-api/</guid>
      <description>&lt;p&gt;Static Web Apps はお手軽に静的な Web サイトを提供するだけでなく、API もデプロイできます。&lt;/p&gt;&#xA;&lt;p&gt;API をデプロイした場合、Azure の他のリソースにアクセスする処理が必要なケースが多いと思います。&lt;/p&gt;&#xA;&lt;p&gt;API から他のリソースにアクセスするには接続情報を環境変数に持たせる手もありますが、マネージド ID を使用するとより安全でスマートなコードが組めるので良いですよね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;static-web-apps-の-api-は-2-種類&#34;&gt;Static Web Apps の API は 2 種類&lt;/h2&gt;&#xA;&lt;p&gt;Static Web Apps の API は &lt;strong&gt;マネージド関数&lt;/strong&gt; と &lt;strong&gt;独自の関数&lt;/strong&gt; の使用という 2 つの構成が存在します。&#xA;マネージド関数の方がお手軽に使えますが、下記の表にあるようにマネージド ID（現状の和訳だと「管理対象 ID」になっている）が使えません。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/static-web-apps/apis&#34;&gt;https://docs.microsoft.com/ja-jp/azure/static-web-apps/apis&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;このため、 &lt;strong&gt;独自の関数の使用&lt;/strong&gt; を選択する必要があります。&lt;/p&gt;&#xA;&lt;p&gt;・・・とキレイに書いてみましたが、実際はこの仕様を知らず、Static Web Apps のマネージド ID を有効化して IAM 設定をして「動かないなぁ。。」と悩んでいました。&#xA;マネージド関数でマネージド ID を使おうとして、169.254.169.254:80 にアクセスできない旨のエラーを見て気づきました。&#xA;上記 IP アドレスは下記のドキュメント等に登場しますが、Azure に対する何らかの問い合わせに使われる IP アドレスです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token&#34;&gt;https://docs.microsoft.com/ja-jp/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;独自の関数の使用&#34;&gt;独自の関数の使用&lt;/h2&gt;&#xA;&lt;p&gt;下記のドキュメントを参考に、Azure ポータルからポチポチ設定すれば連携できます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/static-web-apps/functions-bring-your-own&#34;&gt;https://docs.microsoft.com/ja-jp/azure/static-web-apps/functions-bring-your-own&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ドキュメントを見なくてもできちゃうくらい簡単です。&#xA;まずはマネージド ID を有効化した Functions を用意し、その後 Static Web Apps の「関数」のところからリンクすれば OK です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Static Web Appsの連携先GitHubリポジトリを変更する方法</title>
      <link>https://blog.pokapu.jp/post/how-to-modify-a-github-repository-that-links-to-static-web-apps/</link>
      <pubDate>Tue, 22 Mar 2022 14:41:42 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/how-to-modify-a-github-repository-that-links-to-static-web-apps/</guid>
      <description>&lt;p&gt;Static Web Apps (静的 Web アプリ) って便利ですよね！&#xA;単品のリソース構築で、CDN、Web サーバー、API サーバー、カスタムドメイン with HTTPS、アプリの自動デプロイが一気に実現できるので、これからどんどん活用したいです。&lt;/p&gt;&#xA;&lt;p&gt;ただ私はまだ慣れていないので、アプリを検証用の GitHub リポジトリで用意してインフラを作り、後から参照する GitHub リポジトリを差し替えたくなりました。&#xA;その手順が簡単に分からなかったので、本記事で整理したいと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;az staticwebapp disconnect&lt;/code&gt; してから &lt;code&gt;az staticwebapp update&lt;/code&gt; しましょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;&#xA;&lt;p&gt;Azure CLI で対応できました。&#xA;まずはいつも通り、Azure CLI で Azure にログインします。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az login -t tenant-id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az account set -s subscription-id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;続いて、&lt;code&gt;az staticwebapp disconnect&lt;/code&gt; を使用して Static Web Apps を GitHub リポジトリから切断します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;az staticwebapp disconnect --name static-web-app-name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この状態で Azure ポータルから Static Web Apps の概要画面を眺めると、確かに GitHub リポジトリとの関連が無くなっていることが分かります。&lt;/p&gt;&#xA;&lt;p&gt;最後に &lt;code&gt;az staticwebapp update&lt;/code&gt; を実行して、目的の GitHub リポジトリと接続してあげましょう。&#xA;GitHub の Personal Access Token が必要です。&#xA;(記事執筆時点では –login-with-github のオプションは指定できませんでした)&lt;/p&gt;</description>
    </item>
    <item>
      <title>マネージドIDを使用してRunbookからAzureリソースを操作する</title>
      <link>https://blog.pokapu.jp/post/control-azure-resources-from-a-runbook-using-a-managed-id/</link>
      <pubDate>Sun, 12 Dec 2021 12:06:20 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/control-azure-resources-from-a-runbook-using-a-managed-id/</guid>
      <description>&lt;p&gt;マネージド ID というものを使うと、サービスプリンシパルを用意せずに Azure リソースから Azure リソースの操作を実施することができます。&#xA;Runbook を用いてプライベート DNS ゾーンの操作を自動化を実施することを想定してその手順を用意してみました。&#xA;料金的にもリーズナブルで、すべて Azure ポータル上の作業で完結するので、一度やってみましょう。&lt;/p&gt;&#xA;&lt;h2 id=&#34;操作対象のリソースプライベート-dns-ゾーンの用意&#34;&gt;操作対象のリソース（プライベート DNS ゾーン）の用意&lt;/h2&gt;&#xA;&lt;p&gt;Azure ポータルから DNS ゾーンを作成します。&#xA;DNS ゾーンの名前は &lt;code&gt;private.example.com&lt;/code&gt; 、リソースグループ名は &lt;code&gt;blog&lt;/code&gt; で作成してみました。&lt;/p&gt;&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.pokapu.jp/css/hugo-easy-gallery.css&#34; /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/control-azure-resources-from-a-runbook-using-a-managed-id/001.png&#34; alt=&#34;/control-azure-resources-from-a-runbook-using-a-managed-id/001.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/control-azure-resources-from-a-runbook-using-a-managed-id/001.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Screenshot&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;このまま VNET に接続しなければ宝の持ち腐れですが、今回は説明用ということで。&lt;/p&gt;&#xA;&lt;h2 id=&#34;runbook-の用意&#34;&gt;Runbook の用意&lt;/h2&gt;&#xA;&lt;p&gt;Azure ポータルから Automation アカウントを作成します。&#xA;名前は &lt;code&gt;blogaccount&lt;/code&gt; とか、任意で大丈夫です。&lt;/p&gt;&#xA;&lt;p&gt;作成時に詳細設定でマネージド ID の設定ができるので、デフォルトの通り「システム割り当て」をオンにしておいてください。&#xA;（Automation アカウントの作成後、アカウント設定 – ID から、システム割り当てマネージド ID を「オン」にしても大丈夫です）&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/control-azure-resources-from-a-runbook-using-a-managed-id/002.png&#34; alt=&#34;/control-azure-resources-from-a-runbook-using-a-managed-id/002.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/control-azure-resources-from-a-runbook-using-a-managed-id/002.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Screenshot&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;Automation アカウントが作成されたら、Automation アカウントのポータル画面から プロセス オートメーション – Runbook を開き、＋ Runbook を作成を選択します。&lt;/p&gt;&#xA;&lt;p&gt;Runbook の種類に PowerShell を選び、ランタイムバージョンは 5.1 を選んで作成します。&#xA;Runbook 名は &lt;code&gt;Add-PrivateDnsRecord&lt;/code&gt; にしましょうか。&lt;/p&gt;</description>
    </item>
    <item>
      <title>上限変更ができないクォータの存在を知る</title>
      <link>https://blog.pokapu.jp/post/know-the-existence-of-quotas-that-cannot-be-changed/</link>
      <pubDate>Tue, 06 Apr 2021 22:04:57 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/know-the-existence-of-quotas-that-cannot-be-changed/</guid>
      <description>&lt;p&gt;Azure にはクォータ上限という概念があり、リソース作成はクォータ範囲内でしかできず、ただしクォータ上限の引き上げが要求が可能です。&lt;/p&gt;&#xA;&lt;p&gt;vCPU に関しては上限の引き上げが可能ですが、上限の引き上げが不可能なリソースも存在します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;cdn-プロファイルは上限の引き上げが不可能&#34;&gt;CDN プロファイルは上限の引き上げが不可能&lt;/h2&gt;&#xA;&lt;p&gt;CDN プロファイルは、&lt;strong&gt;サブスクリプション単位に 25 個&lt;/strong&gt;までしか作成できません。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/azure/azure-resource-manager/management/azure-subscription-service-limits#content-delivery-network-limits&#34;&gt;https://docs.microsoft.com/ja-jp/azure/azure-resource-manager/management/azure-subscription-service-limits#content-delivery-network-limits&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;クォータ上限の引き上げを要求したところ、上限増加はサポートされていないとのことでした。&#xA;1 つの CDN プロファイルに複数の CDN エンドポイントを作成可能なので、CDN エンドポイントを大量に作成する場合は計画的に設計する必要があります。&lt;/p&gt;&#xA;&lt;p&gt;1 つの CDN プロファイルに含められる CDN エンドポイントの数は 25 となっているので、大規模な仕組みを作る際はこちらも注意が必要です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;大規模な Azure インフラを構築する際は、クォータ上限の引き上げが可能かの確認も含め、クォータ上限に関する設計が必要です。&#xA;特に同一サブスクリプションに動的にリソースを作成する場合、リソースのスケールアウトを大幅に計画する場合は要注意です。&#xA;必要に応じてサブスクリプションを分割するなどして対応しましょう。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
