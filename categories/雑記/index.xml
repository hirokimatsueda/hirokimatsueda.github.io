<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>雑記 on 備忘録</title>
    <link>https://hirokimatsueda.github.io/categories/%E9%9B%91%E8%A8%98/</link>
    <description>Recent content in 雑記 on 備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright © 2022 Hiroki Matsueda</copyright>
    <lastBuildDate>Sat, 13 May 2023 13:29:27 +0900</lastBuildDate><atom:link href="https://hirokimatsueda.github.io/categories/%E9%9B%91%E8%A8%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ChatGPT が子供向けの曲を作ったらどうなる？</title>
      <link>https://hirokimatsueda.github.io/post/what-if-chatgpt-made-a-song-for-kids/</link>
      <pubDate>Sat, 13 May 2023 13:29:27 +0900</pubDate>
      
      <guid>https://hirokimatsueda.github.io/post/what-if-chatgpt-made-a-song-for-kids/</guid>
      <description>社内で爆発的に流行っている ChatGPT に手を出したら、とてもハマってしまいました。 信長の野望以来のマイブーム？
隙間時間に無理難題を問いかけて、反応を楽しんでいます。 問いかけに対してうまく答えたり答えなかったりするところが、何となく子育てに近い感じがします。
ちょっとお遊びですが、子供向けの曲を作ってもらおうとしてみました。
まずは作詞！ すごくアバウトに振ってみましょう。
架空の子供番組の歌を作って ↓ lyrics 1それっぽい！？
最後の歌詞を見る限りは、オープニング曲というよりエンディング曲ですかね？
コード進行は作れるか？ 続いて曲にするためにコード進行を決めていきましょう。
良いね！ コード進行を教えて ↓ chord progression 1う～ん・・・流石にこれは詰まらなすぎます。
ちょっとつまらないので、ヴァースで変化をつけて ↓ chord progression 2(ヴァースじゃなくてコーラスで変化を付けさせるべきだった気も・・・)
いやぁ・・・これもちょっとなぁ。
私の好きな、某イスが主役の番組の音楽とか想像すると物足りないです。
最近の子供番組はもっと複雑な進行になる印象です。 もう少し思い切った形になりますか？ ↓ chord progression 3ちょっとやり過ぎな感じもしますが、良しとしますか！
コードに合わせて歌詞を調整 ブリッジが追加されて歌詞との対応関係が崩れたようなので、歌詞を調整してみます。
良いですね、このコードに沿って歌の歌詞を調整してください。 ↓ lyrics 2lyrics 2やはりエンディング曲な締めですが、弾き語りで使えそうなメモになってきました。
メロディーラインも作れるか？ ここまで来たらメロディーラインも作ってほしいですね。
メロディラインを作ってください ↓ melody 1途中で回答の生成を止めちゃいましたが、音楽の生成をやろうとしてたので、文字で再度書いてもらうことに。</description>
    </item>
    
    <item>
      <title>35歳エンジニアが使える言語の変遷</title>
      <link>https://hirokimatsueda.github.io/post/changes-in-programming-languages-that-35-year-old-engineers-can-now-use/</link>
      <pubDate>Mon, 05 Sep 2022 21:01:24 +0900</pubDate>
      
      <guid>https://hirokimatsueda.github.io/post/changes-in-programming-languages-that-35-year-old-engineers-can-now-use/</guid>
      <description>「SE の 35 歳定年説」みたいなのを気にしながら生き方を考えていたかもしれません。
35 歳になってみて、プログラムを書くことに対してどうだったかな？と振り返ってみました。
10 歳～小学生 Excel VBA を使ってました。
ナンバープレイス（数独と言った方が伝わる？）の答え合わせツールを作ったなぁ、程度ですが・・・いや、勝手に答えを出してくれるわけではなく、別シートに書いてある回答と If 文で比較しただけです。
中学生 Visual Basic 6.0（VB6）を使っていました。
「のんびりゆっくり Visual Basic」という書籍が愛読書でした。
夏休みの自由研究で毎年ゲームを作っていました。
中 2 の時にシューティングゲームを作るために Windows API にも手を出しました。
高専生 専攻科まで行ったので 7 年間ですね。
授業で習った C 言語や Java などが使えるようになりました。
研究で C++と OpenGL で毛筆シミュレーションを作ったり、同じく C++と OpenGL で高専プロコンのために金魚すくいシミュレーターを作ったりしました。
ただ趣味のプログラミングとしては相変わらず VB6 が好きでした。
社会人（1 社目、2 社目） Ruby に手を出したり、古の言語に触れてみたり、幅広い言語を使うことになりました。 その中でも Java や.NET 系のオブジェクト指向言語（C#、VB.NET）が主力だったと思います。
チーム開発の経験が進むにつ入れて、VB6 との距離は遠ざかっていきました・・・
社会人になってからは C#が一番好きな言語になりました。
社会人（3 社目） 最初の頃は C#の技術力を武器に働きました。
その後、Docker や PowerShell など、言語のカテゴリで書くか微妙なところですが、次第にインフラに寄った知識が増えていきました。
いつの間にか terraform を覚え、Kubernetes のマニフェストファイル(yaml)も読み書きできるようになっていきました。</description>
    </item>
    
    <item>
      <title>幼少期に触れ合ったパソコンたち</title>
      <link>https://hirokimatsueda.github.io/post/computers-that-i-came-into-contact-with-in-my-childhood/</link>
      <pubDate>Tue, 21 Jun 2022 12:06:20 +0900</pubDate>
      
      <guid>https://hirokimatsueda.github.io/post/computers-that-i-came-into-contact-with-in-my-childhood/</guid>
      <description>今年も非常に優秀な新卒入社社員の皆さんと出会えてうれしい限りです。 この季節になると、なんとなく自分の過去を振り返っているように思います。
なぜ自分はエンジニアになったか？を説明する時に、「10 歳からプログラミングを始めたから」と普段答えているのですが、3 つのパソコンとの関りが大きく関係していると思っています。
ちなみに私が小学校 1 年生くらいの時に Windows 95 が出ました。
Windows 95 のパソコン Windows 3.1 のパソコンに Windows 95 の CD-ROM でアップグレードインストールしたものです。
ブルースクリーンが頻発したりハードディスクがガリガリ音を立てたり、本当に不安定なパソコンでした。メモリは確か 8MB・・・GB じゃないですよ？
ハードディスクも 700MB くらいだった記憶があります。
メモリは後で 40MB に増設した記憶があります。
ゲームをやるくらいでしか使っていませんでしたが、Windows という、その後爆発的に普及する OS に幼少期から触れられたのは大きいです。
NEC PC9801（たぶん） こちらは CLI ベースで動くパソコンですね。
フロッピーディスクでアプリケーションを読み込んだりして使えるものです。
このパソコンで父が趣味でオセロのプログラムを書いていて、そのソースコードの LINE 文を書き替えたら、オセロの盤面の線が斜めになったのが、プログラミングを始める本当の最初の点だと思います。
これが無ければプログラミングは始めていなかったと思います。
当時このパソコンが大好きでした。
画面全体の表示を全て制御できるので、パソコンを全部コントロールしているような感覚になりました。
高専の入試面接のときに「OS を作れるようになりたいです」などと無謀なことを言ったのもこちらがきっかけです。 （結局 OS の開発には１ミリも手を出しませんでした・・・）
SHARP MZ-731（たぶん） こちらは機械語で動くパソコンです。
祖父がパソコンを勉強するために購入したと聞いています。
家庭用テレビに繋ぐと画面表示ができて、メモリが確か 64KB、ハードディスクは無く、カセットテープでデータの読み書きができました。
例えば 3 分くらいかけてカセットテープを読み込ませると BASIC が使えるようになります。
私個人としてはあんまり活用していなかったですが、メモリ空間の一部がディスプレイの表示に繋がっていて間違えて書き換えると画面の色が変わったりとか、マシンが「暴走」して応答しなくなるとかを経験して、純粋にコンピュータがどういうものかを理解することに役立ったと思います。
まとめ メモリ容量とか具体的な数字で覚えているのが怖いですね。
その後、パソコンは買い替えられて Windows Me とインターネット接続を手に入れ、Visual Basic 6.</description>
    </item>
    
    <item>
      <title>エンジニア業務を加速しよう！</title>
      <link>https://hirokimatsueda.github.io/post/speeding-up-engineering-work/</link>
      <pubDate>Tue, 03 Dec 2019 08:22:49 +0900</pubDate>
      
      <guid>https://hirokimatsueda.github.io/post/speeding-up-engineering-work/</guid>
      <description>スピーディーに仕事がしたい！ 先月は docker から始まるコマンドを何度も何度も実行していた気がします。
私の今の仕事は検証がメインで、何度も似たようなコマンドを実行したり、何かをダウンロードしたりという作業を実施しています。
検証作業は先が見えにくいので、できるだけスピーディーにやるべきことを繰り返して知見を増やしたいですよね。
検証に限らずスピーディーに仕事をすることは大切だと思いますので、私が実践している仕事の高速化手法を書いてみます。
同じことをダラダラ何度も書かない ([ctrl] + [R]の活用) コマンドを実行する時のお話です。
例えば、 docker build のコマンドって何度も同じ内容で実行するのに長くなりがちですよね。
docker build . -t cloudconfig/blog 上記で「いや、それくらいなら短いのでは？」と思った方、書いた文字の正しさを検証する時間を無視していませんか？
例えば、 docker を dokcer と書き間違えちゃったとして、実行する前に気付けますか？
できれば前回実行したコマンドをそのまま書いたことを書きたいですよね。
そんな時、[ctrl] + [R] が使えます。
Linux 環境で Bash を使用している場合や、Windows 環境で PowerShell を使用している場合に押してみてください。
そして、build とキーボードから入力すると、前に実行した docker build の履歴が表示されると思います。
reverse-i-search とか bck-i-search とか呼ばれるみたいですね。
使いたい候補が出たら [Enter] を押してそのまま実行したり、 [→] を押すなりして一部を修正して実行したりできるので、過去に成功したコマンドラインを流用できます。とても便利ですね！
ただ、失敗したコマンドも出ますし、検索文字列が短すぎたりすると意図しない実行履歴が出る場合もありますので注意してください。
VM を活用する 例えば、Docker を使用する時、どこで動かしていますか？
自分の PC で動かしていませんか？
自分の PC 上で動かすと便利なこともありますが、下記のようなリスクがあります。
 PC のリソースを食いつぶしてしまう ベースイメージのダウンロードに時間がかかる ミドルウェアの状態を把握しきれず、自分の PC でしか実行できない Dockerfile が出来上がる可能性がある  上記のようなリスクは、VM を使用することで改善できます。</description>
    </item>
    
    <item>
      <title>職業プログラマの第一歩を踏み出したあなたへ</title>
      <link>https://hirokimatsueda.github.io/post/the-first-step-of-a-profession-programmer/</link>
      <pubDate>Fri, 21 Jun 2019 12:06:20 +0900</pubDate>
      
      <guid>https://hirokimatsueda.github.io/post/the-first-step-of-a-profession-programmer/</guid>
      <description>10 歳からプログラミングやってます、と、プレゼン内で笑いを取ろうと喋ったら、喋りが下手すぎてリアクションがもらえず焦った松枝です。
仕事でプログラミングをするようになった新卒の人に対して伝えたいことがあります。今年の弊社の新卒の皆さんにはお伝えしたのですが、こちらのブログにも書いてみようと思います。
背景（読み飛ばし推奨） 前述の通り 10 歳からプログラミングを始め、高専専攻科を卒業するまでの約 12 年間、趣味または研究でプログラミングをやっていました。 当時はまだ Windows 98 SE とかの時代で、小中学校の同級生でプログラミングができる人は皆無で、高専に入ってようやくまともに会話できる人が数人いる、というような状態でした。
そんな状態の人が社会人になったので、自分の力はどこでも通用するんじゃね？という気持ちが半分、いやいや世の中にはもっとすごい人が必ずいるだろうついていけるかな？という気持ちが半分で、配属になりました。
そこで出会ったチームリーダーさんの技術に圧倒されました。 力試しで与えられた課題を解いてレビューして頂いた結果、自分のコードの汚さ、詰めの甘さに気づくことができました。同時に、とても恵まれた環境に配属されたのだとワクワクしてきました。
聞けばそのリーダーさんは当時 30 歳くらいで、プログラミングに初めて触れたのは大学生の頃ということでした。つまり、「プログラムを書く」というキャリア年数は私と同じくらいです。 しかし技術力は雲泥の差でした。私は間違ったものを積み重ねていたのだなという後悔の気持ちが襲ってきました。 若い人が同じような後悔を抱えずに過ごせるよう、仕事としてのプログラミングを始める人に最初に知ってほしい、いくつかのポイントを伝授します。
人が読みやすいコードを追求する  半年後には何をやっているか分からないコードにしない 変数名は分かりやすい単語を使う  できるだけ日本語のローマ字表記ではなく英語で書きましょう。   コーディング規約を遵守する、フォーマッタを活用する  if( a== b){ c++;} とか書いてあったら、私は(心の中で)キレます。   コメントを適宜書く。ただし書きすぎない  // a を b に代入する みたいなプログラムの説明は要りません。 そのコードで何をしたいのか伝わりにくい時にコメントを書いてください。 伝わりにくいときはきっとコードを見直したほうが良いです。   既存コードのフィーリングを尊重する  勝手にログ出力を端折ったりとかしないでください。せめてプルリクエスト上げるまでには戻して…   車輪の再開発を避ける  クイックソートとかを自分で作らずライブラリを活用しましょう。品質確保って大変ですよ？    自分の理解したコードを書く  ネット上の Stack Overflow や teratail などに記載しているコードをそのままコピペしない 友達に直接コードを書いてもらわない  参考にした、教えてもらった情報は何なのか、自分の知識に落とし込んでから、改めて今回のケースはどうすればよいのか考えて実装する。    まとめ 上記をまとめると、要は「美しいコードを書いてください」ということです。 音楽でいえば、例えばクラシックの音楽は何百年も昔に作られたにも関わらず、現代の私たちが聴いても良い曲だと感じますよね？</description>
    </item>
    
  </channel>
</rss>
