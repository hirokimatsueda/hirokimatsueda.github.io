<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AKS on 備忘録</title>
    <link>https://blog.pokapu.jp/tags/aks/</link>
    <description>Recent content in AKS on 備忘録</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <copyright>Copyright © 2022 Hiroki Matsueda</copyright>
    <lastBuildDate>Thu, 06 Jul 2023 09:36:15 +0900</lastBuildDate>
    <atom:link href="https://blog.pokapu.jp/tags/aks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Terraformを使ってAKS上にFluxを導入する手順とデモ</title>
      <link>https://blog.pokapu.jp/post/deploy-flux-on-aks-with-terraform/</link>
      <pubDate>Thu, 06 Jul 2023 09:36:15 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/deploy-flux-on-aks-with-terraform/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;GitOps は、開発者がコードを Git リポジトリにプッシュすることで自動的にインフラストラクチャーが更新される仕組みです。&lt;/p&gt;&#xA;&lt;p&gt;Flux は、GitOps を実現するためのツールであり、Kubernetes の manifest ファイルを Git リポジトリに保存し、変更があるたびに自動でデプロイすることができます。&lt;/p&gt;&#xA;&lt;p&gt;本記事では、Terraform を用いて AKS 上に Flux を導入する手順を説明し、GitOps のデモを行います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;aks-上に-flux-を導入する手順&#34;&gt;AKS 上に Flux を導入する手順&lt;/h2&gt;&#xA;&lt;h3 id=&#34;連携先の-github-リポジトリの準備&#34;&gt;連携先の GitHub リポジトリの準備&lt;/h3&gt;&#xA;&lt;p&gt;GitHub リポジトリが空だと Terraform の実行時にエラーになるため、main ブランチに readme か何かを入れておいてください。&lt;/p&gt;&#xA;&lt;p&gt;続いて GitHub との認証情報の準備です。&#xA;今回は Deploy key を用いて Flux から GitHub に接続する方針で説明します。&lt;/p&gt;&#xA;&lt;p&gt;Deploy key の作成方法は下記です。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;接続に使用する SSH キーを生成します&#xA;&lt;ul&gt;&#xA;&lt;li&gt;参考：&lt;a href=&#34;https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key&#34;&gt;https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;対象のリポジトリの「Setting」から、「Deploy keys」を開きます&lt;/li&gt;&#xA;&lt;li&gt;「Add deploy key」をクリックします&lt;/li&gt;&#xA;&lt;li&gt;Title に任意の名称を設定し、SSH キーの公開鍵をコピペし、「Allow write access」のチェックを入れて「Add key」します&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;SSH キーの秘密鍵は Terraform の実行時に必要になります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;aks-と-flux-の導入&#34;&gt;AKS と Flux の導入&lt;/h2&gt;&#xA;&lt;p&gt;AKS の作成と Flux の導入は Terraform で実現しましょう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>自作のWindowsアプリをAKSに載せるキホン技</title>
      <link>https://blog.pokapu.jp/post/get-started-with-windows-container-aks-easily/</link>
      <pubDate>Wed, 08 Apr 2020 21:07:42 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/get-started-with-windows-container-aks-easily/</guid>
      <description>&lt;p&gt;Azure Kubernetes Service(以降、AKS)は Windows コンテナの使用できる構成を作成することができます。&lt;/p&gt;&#xA;&lt;p&gt;（記事公開時点ではパブリックプレビュー）&lt;/p&gt;&#xA;&lt;p&gt;Windows コンテナが使える AKS を用意して、アプリを動かしてみましょう。&lt;/p&gt;&#xA;&lt;p&gt;アプリの作成からインフラの作成まで一通り必要な手順を書いてみましたので、この記事をベースに Windows コンテナの世界に入門していただけたらと思います。&lt;/p&gt;&#xA;&lt;p&gt;また、アプリ開発、コンテナ作成、AKS 作成を一通り記載しているので、例えばアプリ開発は知識があるけどインフラはちょっと・・・という場合に部分的に参照していただけると嬉しいです。&lt;/p&gt;&#xA;&lt;p&gt;Azure Cloud Shell とはなんぞや？などの細かい説明は省いていますので、適宜調べながら読み進めていただけたらと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;（Windows 環境でしか動作しない）アプリケーションを作成します&lt;/li&gt;&#xA;&lt;li&gt;アプリケーションを載せたコンテナイメージを作成します&lt;/li&gt;&#xA;&lt;li&gt;コンテナイメージをコンテナレジストリ（ACR）に格納します&lt;/li&gt;&#xA;&lt;li&gt;Windows コンテナが動作する AKS を作成します&lt;/li&gt;&#xA;&lt;li&gt;マニフェストファイルを使用して、AKS 上でコンテナを動かします&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;web-アプリの作成&#34;&gt;Web アプリの作成&lt;/h2&gt;&#xA;&lt;p&gt;【作業環境の想定：手元の Windows PC】&lt;/p&gt;&#xA;&lt;p&gt;Web 上に公開されているサンプルアプリを使っても良いんですが、現実は自社で作成したアプリなどを使用すると思うので、Web アプリの作成からサラッと見てみましょう。&lt;/p&gt;&#xA;&lt;p&gt;Windows コンテナが必要なケースは、Windows でしか動作しないアプリ、例えば.NET Framework のアプリを使用している場合だと思われます。.NET Framework の ASP.NET MVC アプリを作っておきましょう。&lt;/p&gt;&#xA;&lt;p&gt;下記サイトから Visual Studio のインストーラをダウンロードします。&#xA;&lt;a href=&#34;https://visualstudio.microsoft.com/ja/downloads/&#34;&gt;https://visualstudio.microsoft.com/ja/downloads/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;インストーラを起動し、「ASP.NET と Web 開発」を選択してインストールします。&lt;/p&gt;&#xA;&lt;p&gt;インストールが成功したら、新規プロジェクトを起動して、C#の ASP.NET MVC アプリを作成しましょう。&lt;/p&gt;&#xA;&lt;p&gt;ちょっと古めのアプリを載せる想定だと思いますので、.NET Framework は「4.5.2」辺りが良いでしょうか。プロジェクト名は適当で良いので、「MVC」のアプリを作成してください。&lt;/p&gt;&#xA;&lt;p&gt;アプリが作成されたら、Visual Studio のソリューションエクスプローラーから、Views/Home/Index.cshtml を開き、適当な加工を加えて実行してみてください。例えば下記のような感じでザックリいきましょう。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ViewBag.Title = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;コンテナアプリのデモ&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;div class=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jumbotron&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;h1&amp;gt;ASP.NET&amp;lt;/h1&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;p class=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lead&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;コンテナで&lt;/span&gt;Webアプリを動かしてみよう&amp;lt;/p&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/div&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;F5 キーでアプリの正常動作を確認したら、アプリケーションを発行しましょう。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
