<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on 備忘録</title>
    <link>https://blog.pokapu.jp/tags/c%23/</link>
    <description>Recent content in C# on 備忘録</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <copyright>Copyright © 2022 Hiroki Matsueda</copyright>
    <lastBuildDate>Fri, 02 Dec 2022 10:00:00 +0900</lastBuildDate>
    <atom:link href="https://blog.pokapu.jp/tags/c%23/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azureお父さん必見！赤ちゃんのうんち記録アプリで子育てをDX！?</title>
      <link>https://blog.pokapu.jp/post/baby-info-recording-system/</link>
      <pubDate>Fri, 02 Dec 2022 10:00:00 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/baby-info-recording-system/</guid>
      <description>&lt;p&gt;※ この記事は、cloud.config Tech Blog にもマルチポストする予定です&lt;/p&gt;&#xA;&lt;p&gt;子供が産まれて妻子の入院期間中、体温や授乳回数やおしっこ・うんちの時間を記録する紙があって、そこに毎日記録していました。&lt;/p&gt;&#xA;&lt;p&gt;退院後もそのフォーマットを Excel で真似て紙に印刷して使っていて、子供の不調が無いか確認していました。&lt;/p&gt;&#xA;&lt;p&gt;子供が 1 歳になった今も一応、記録内容を減らした紙を運用してはいるものの、ほとんど問題ないのであまり書いていないです。&lt;/p&gt;&#xA;&lt;p&gt;ただその中で、絶対書いておきたいのが、&lt;/p&gt;&#xA;&lt;p&gt;うんちの記録です！&lt;/p&gt;&#xA;&lt;p&gt;便秘だと不機嫌になったり場合によっては病院に行かないといけなくなります。&lt;/p&gt;&#xA;&lt;p&gt;うちの子は最近は割と快便ですが、最初の頃は便秘でとても心配しました。&lt;/p&gt;&#xA;&lt;p&gt;また、うんちがあまり出ていない状態でお風呂に入ると・・・ね。。&lt;/p&gt;&#xA;&lt;p&gt;ということで、うんちの回数を記録するアプリを書いてみましたのでご紹介です。&lt;/p&gt;&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.pokapu.jp/css/hugo-easy-gallery.css&#34; /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/baby-info-recording-system/001.png&#34; alt=&#34;/baby-info-recording-system/001.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/baby-info-recording-system/001.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Screen shot&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;アプリの概要&#34;&gt;アプリの概要&lt;/h2&gt;&#xA;&lt;p&gt;カレンダーの中の「＋」ボタンを押すと、当日の枠に 💩 マークがつきます。&lt;/p&gt;&#xA;&lt;p&gt;データは Cosmos DB に保管されます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アプリコード&#34;&gt;アプリコード&lt;/h2&gt;&#xA;&lt;p&gt;Visual Studio 2022 で作成しました。GitHub で見れるようにしています。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/baby-info-recording-system&#34;&gt;https://github.com/hirokimatsueda/baby-info-recording-system&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;フロントアプリの実装は大目に見てください。。&lt;/p&gt;&#xA;&lt;p&gt;フロントの作りが微妙ですが・・・赤ちゃん ID を変更すると別々のデータを管理できるので、双子や兄弟のデータも扱えます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アーキテクチャ概要&#34;&gt;アーキテクチャ概要&lt;/h2&gt;&#xA;&lt;p&gt;インフラとしては Azure の Static Web Apps での動作を想定し、情報を CosmosDB に保存するので、比較的安価に運用できるものになっています。&lt;/p&gt;&#xA;&lt;p&gt;アプリは &lt;a href=&#34;https://learn.microsoft.com/ja-jp/aspnet/core/blazor/?view=aspnetcore-6.0&#34;&gt;ASP.NET Core Blazor&lt;/a&gt; での記述です。&lt;/p&gt;&#xA;&lt;p&gt;インフラもアプリも、ベースとなる考え方は以前ブログでご紹介した下記のコードです。&#xA;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;インフラ構築&#34;&gt;インフラ構築&lt;/h2&gt;&#xA;&lt;p&gt;Api は Static Web Apps のデフォルトの機能で動かすと Managed ID が使えないため、Static Web Apps とは別で構築した Functions を Static Web Apps にリンクする形を取るのがポイントです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>実用性重視！AzureのマネージドID活用のサンプルコード(アプリコード)</title>
      <link>https://blog.pokapu.jp/post/azure-managed-id-sample-application/</link>
      <pubDate>Sat, 20 Aug 2022 14:50:39 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/azure-managed-id-sample-application/</guid>
      <description>&lt;p&gt;下記のサンプル実装のアプリコード部分を解説します。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;アプリ処理詳細&#34;&gt;アプリ処理詳細&lt;/h2&gt;&#xA;&lt;p&gt;コードはこちら:&#xA;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample/blob/main/applications/DataApis&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample/blob/main/applications/DataApis&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;詳細と言うほどのものではないですが・・・。&lt;/p&gt;&#xA;&lt;h3 id=&#34;getdata&#34;&gt;GetData&lt;/h3&gt;&#xA;&lt;p&gt;リクエストパラメータから &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;category&lt;/code&gt; を読み取って、対象のデータを Cosmos DB から取得し返却します。&lt;/p&gt;&#xA;&lt;h3 id=&#34;putdata&#34;&gt;PutData&lt;/h3&gt;&#xA;&lt;p&gt;リクエストボディのデータを Cosmos DB に Upsert します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;実装のポイント&#34;&gt;実装のポイント&lt;/h2&gt;&#xA;&lt;p&gt;マネージド ID という観点で言うと、CosmosClient に渡すクレデンシャル情報に &lt;code&gt;new DefaultAzureCredential()&lt;/code&gt; を指定するくらいです。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; CosmosClient InitializeCosmosClient()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CosmosClient(Environment.GetEnvironmentVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COSMOS_ENDPOINT&amp;#34;&lt;/span&gt;, EnvironmentVariableTarget.Process), &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DefaultAzureCredential());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これにより Functions 上ではマネージド ID のクレデンシャルが使用されます。&lt;/p&gt;&#xA;&lt;p&gt;ローカル PC 上で実行する場合は、ローカル PC 上の認証情報を使用してくれるので、例えば az login したユーザーが Cosmos DB のデータへのアクセス権限を持っていればローカル PC でデバッグが可能です。&lt;/p&gt;&#xA;&lt;p&gt;ほかのポイントとしては、CosmosClient をメソッド呼び出し時に生成するのではなく Static 変数として持っておき、Lazy クラスを活用した初期化を実施しています。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Lazy&amp;lt;CosmosClient&amp;gt; lazyClient = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Lazy&amp;lt;CosmosClient&amp;gt;(InitializeCosmosClient);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これにより CosmosClient の初期化というコストの高い処理回数を削減しています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;アプリ開発のポイントを整理しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>実用性重視！AzureのマネージドID活用のサンプルコード(概要)</title>
      <link>https://blog.pokapu.jp/post/azure-managed-id-sample-summary/</link>
      <pubDate>Sat, 20 Aug 2022 14:50:37 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/azure-managed-id-sample-summary/</guid>
      <description>&lt;p&gt;Azure のマネージド ID は分かれば非常に有用な概念なのですが、いざ実装するとなった場合、インフラとアプリケーションが密接に関わっていることもあってハードルが高く思うケースがあると思います。&lt;/p&gt;&#xA;&lt;p&gt;そんな皆様のために、いつもの当たり障りのない記事ではなく、しっかり実用的に使えるコードを用意しました。&lt;/p&gt;&#xA;&lt;p&gt;早速全体像をご紹介します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;サンプルコードの概要&#34;&gt;サンプルコードの概要&lt;/h2&gt;&#xA;&lt;p&gt;コードは下記にあります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hirokimatsueda/azure-managed-id-sample&#34;&gt;https://github.com/hirokimatsueda/azure-managed-id-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;何らかのデータを Functions を経由して Cosmos DB に保管・取得するアプリとインフラのコードのサンプルです。&lt;/p&gt;&#xA;&lt;p&gt;データは少なくとも id と category の値を持つことを想定します。こんな感じで。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc123&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;category&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aaaabbbbcccc&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;category は Cosmos DB 上のパーティションキーとして設定しますので、一定の法則で値が入ると良いことがありそうですね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アーキテクチャ&#34;&gt;アーキテクチャ&lt;/h2&gt;&#xA;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://blog.pokapu.jp/css/hugo-easy-gallery.css&#34; /&gt;&#xA;&lt;div class=&#34;box&#34; &gt;&#xA;  &lt;figure class=&#34;center&#34; itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;&#xA;    &lt;div class=&#34;img&#34;&gt;&#xA;      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://blog.pokapu.jp/azure-managed-id-sample-summary/001.png&#34; alt=&#34;/azure-managed-id-sample-summary/001.png&#34;/&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;a href=&#34;https://blog.pokapu.jp/azure-managed-id-sample-summary/001.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;&#xA;      &lt;figcaption&gt;&lt;h4&gt;Architecture&lt;/h4&gt;&#xA;      &lt;/figcaption&gt;&#xA;  &lt;/figure&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;ユーザーからのリクエストを Functions で受け取り、Cosmos DB とデータのやり取りをするシンプルな構成です。&lt;/p&gt;&#xA;&lt;p&gt;Functions の認証は Functions の webbook の API キーを利用します。&lt;/p&gt;&#xA;&lt;p&gt;Functions から Cosmos DB にアクセスする手段は様々なものがありますが、表題の通りマネージド ID を使用を想定しています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;コードの構成&#34;&gt;コードの構成&lt;/h2&gt;&#xA;&lt;p&gt;applications フォルダに Functions 上で動作する C#のアプリケーションがあり、infrastructure フォルダに Azure リソースを構築するための terraform のコードがあります。&lt;/p&gt;&#xA;&lt;p&gt;infrastructure フォルダの terraform を実行して Azure 上に Functions と Cosmos DB、その他関連リソースを作成した後、applications フォルダのアプリを Functions にデプロイすればアプリにアクセス可能になります。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
