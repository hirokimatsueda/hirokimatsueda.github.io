<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on 備忘録</title>
    <link>https://blog.pokapu.jp/tags/docker/</link>
    <description>Recent content in Docker on 備忘録</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <copyright>Copyright © 2022 Hiroki Matsueda</copyright>
    <lastBuildDate>Mon, 03 Feb 2020 21:29:12 +0900</lastBuildDate>
    <atom:link href="https://blog.pokapu.jp/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dockerfileに出てくる謎のexe、ServiceMonitor</title>
      <link>https://blog.pokapu.jp/post/mysterious-exe-that-appears-in-dockerfile/</link>
      <pubDate>Mon, 03 Feb 2020 21:29:12 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/mysterious-exe-that-appears-in-dockerfile/</guid>
      <description>&lt;h2 id=&#34;dockerfile-の基本的な書き方&#34;&gt;Dockerfile の基本的な書き方&lt;/h2&gt;&#xA;&lt;p&gt;皆様、Windows コンテナで遊んでいますか？&lt;/p&gt;&#xA;&lt;p&gt;Dockerfile に書く内容は、誤解を恐れず表現すると、だいたい下記のような流れですよね。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ベースイメージ&lt;/li&gt;&#xA;&lt;li&gt;ミドルウェアのインストール、セットアップの処理&lt;/li&gt;&#xA;&lt;li&gt;アプリケーションのコピー&lt;/li&gt;&#xA;&lt;li&gt;アプリケーションの起動を監視するために ENTRYPOINT を記載&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;これだけ認識していれば、例えば単発実行や無限ループで処理待機するコンソールアプリケーションのコンテナ化なんてのは、（細かいことを無視すれば）すぐにできてしまうと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;謎の-exe-servicemonitor&#34;&gt;謎の exe 、ServiceMonitor&lt;/h2&gt;&#xA;&lt;p&gt;しかし、例えば下記の Dockerfile を見てください。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/dotnet-framework-docker/blob/7d120a3da56ea5279e1b54a8185530af056c7b33/4.8/aspnet/windowsservercore-ltsc2019/Dockerfile&#34;&gt;https://github.com/microsoft/dotnet-framework-docker/blob/7d120a3da56ea5279e1b54a8185530af056c7b33/4.8/aspnet/windowsservercore-ltsc2019/Dockerfile&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;これは IIS で動く Web アプリを動かすときに使える Dockerfile になるんですが、 ENTRYPOINT に ServiceMonitor.exe なるものが指定されています。&lt;/p&gt;&#xA;&lt;p&gt;「なにこれ」と思いませんでしたか？&lt;/p&gt;&#xA;&lt;p&gt;私は思いました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;そもそも-entrypoint-って何だっけ&#34;&gt;そもそも ENTRYPOINT って何だっけ&lt;/h2&gt;&#xA;&lt;p&gt;ENTRYPOINT は「コンテナが実行するファイルを設定します。」とのことです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://docs.docker.jp/v1.11/engine/reference/builder.html#entrypoint&#34;&gt;http://docs.docker.jp/v1.11/engine/reference/builder.html#entrypoint&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;そして、その「実行するファイル」が終了すると共に、コンテナが終了します。&lt;/p&gt;&#xA;&lt;p&gt;これを IIS で動かすアプリに当てはめるとどうなるでしょうか？&lt;/p&gt;&#xA;&lt;p&gt;IIS で動かすアプリは exe ファイルでは無いので、それ単体で実行することはできませんよね。IIS の上に載せてあげることで初めて動作します。&lt;/p&gt;&#xA;&lt;p&gt;ということは、IIS が ENTRYPOINT に記載すべきものとなります。&lt;/p&gt;&#xA;&lt;p&gt;しかし、 IIS 自体はサービスなので、「コンテナが実行するファイル」とは違う概念になります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;サービスの起動状態を監視するアプリが欲しい&#34;&gt;「サービスの起動状態を監視するアプリ」が欲しい&lt;/h2&gt;&#xA;&lt;p&gt;例えば、「コンテナが実行するファイル」が IIS というサービスの起動状態を監視してくれて、そのサービスの状態に従って終了してくれたら良さそうに思いませんか？&lt;/p&gt;&#xA;&lt;p&gt;そんな役割を担ってくれるのが ServiceMonitor.exe です。&lt;/p&gt;&#xA;&lt;p&gt;よって、IIS のようなサービスの状態がコンテナの起動状態を左右する場合は、 ServiceMonitor.exe を ENTRYPOINT に指定してあげればコンテナが実現できそうですね。&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;ServiceMonitor.exe のおかげて IIS アプリのコンテナが実現できることが分かりましたでしょうか？&#xA;広く公開されている Dockerfile は参考になるので、「これ何やってるんだろう？」を深堀してみると面白いですし、勉強になります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>エンジニア業務を加速しよう！</title>
      <link>https://blog.pokapu.jp/post/speeding-up-engineering-work/</link>
      <pubDate>Tue, 03 Dec 2019 08:22:49 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/speeding-up-engineering-work/</guid>
      <description>&lt;h2 id=&#34;スピーディーに仕事がしたい&#34;&gt;スピーディーに仕事がしたい！&lt;/h2&gt;&#xA;&lt;p&gt;先月は &lt;code&gt;docker&lt;/code&gt; から始まるコマンドを何度も何度も実行していた気がします。&lt;/p&gt;&#xA;&lt;p&gt;私の今の仕事は検証がメインで、何度も似たようなコマンドを実行したり、何かをダウンロードしたりという作業を実施しています。&lt;/p&gt;&#xA;&lt;p&gt;検証作業は先が見えにくいので、できるだけスピーディーにやるべきことを繰り返して知見を増やしたいですよね。&lt;/p&gt;&#xA;&lt;p&gt;検証に限らずスピーディーに仕事をすることは大切だと思いますので、私が実践している仕事の高速化手法を書いてみます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;同じことをダラダラ何度も書かない-ctrl--rの活用&#34;&gt;同じことをダラダラ何度も書かない ([ctrl] + [R]の活用)&lt;/h2&gt;&#xA;&lt;p&gt;コマンドを実行する時のお話です。&lt;/p&gt;&#xA;&lt;p&gt;例えば、 docker build のコマンドって何度も同じ内容で実行するのに長くなりがちですよね。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker build . -t cloudconfig/blog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上記で「いや、それくらいなら短いのでは？」と思った方、書いた文字の正しさを検証する時間を無視していませんか？&lt;/p&gt;&#xA;&lt;p&gt;例えば、 &lt;code&gt;docker&lt;/code&gt; を &lt;code&gt;dokcer&lt;/code&gt; と書き間違えちゃったとして、実行する前に気付けますか？&lt;/p&gt;&#xA;&lt;p&gt;できれば前回実行したコマンドをそのまま書いたことを書きたいですよね。&lt;/p&gt;&#xA;&lt;p&gt;そんな時、[ctrl] + [R] が使えます。&lt;/p&gt;&#xA;&lt;p&gt;Linux 環境で Bash を使用している場合や、Windows 環境で PowerShell を使用している場合に押してみてください。&lt;/p&gt;&#xA;&lt;p&gt;そして、&lt;code&gt;build&lt;/code&gt; とキーボードから入力すると、前に実行した &lt;code&gt;docker build&lt;/code&gt; の履歴が表示されると思います。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;reverse-i-search&lt;/code&gt; とか &lt;code&gt;bck-i-search&lt;/code&gt; とか呼ばれるみたいですね。&lt;/p&gt;&#xA;&lt;p&gt;使いたい候補が出たら [Enter] を押してそのまま実行したり、 [→] を押すなりして一部を修正して実行したりできるので、過去に成功したコマンドラインを流用できます。とても便利ですね！&lt;/p&gt;&#xA;&lt;p&gt;ただ、失敗したコマンドも出ますし、検索文字列が短すぎたりすると意図しない実行履歴が出る場合もありますので注意してください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;vm-を活用する&#34;&gt;VM を活用する&lt;/h2&gt;&#xA;&lt;p&gt;例えば、Docker を使用する時、どこで動かしていますか？&lt;/p&gt;&#xA;&lt;p&gt;自分の PC で動かしていませんか？&lt;/p&gt;&#xA;&lt;p&gt;自分の PC 上で動かすと便利なこともありますが、下記のようなリスクがあります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PC のリソースを食いつぶしてしまう&lt;/li&gt;&#xA;&lt;li&gt;ベースイメージのダウンロードに時間がかかる&lt;/li&gt;&#xA;&lt;li&gt;ミドルウェアの状態を把握しきれず、自分の PC でしか実行できない Dockerfile が出来上がる可能性がある&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;上記のようなリスクは、VM を使用することで改善できます。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
