<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>プログラミング on 備忘録</title>
    <link>https://hirokimatsueda.github.io/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in プログラミング on 備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright © 2022 Hiroki Matsueda</copyright>
    <lastBuildDate>Fri, 21 Jun 2019 12:06:20 +0900</lastBuildDate><atom:link href="https://hirokimatsueda.github.io/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>職業プログラマの第一歩を踏み出したあなたへ</title>
      <link>https://hirokimatsueda.github.io/post/the-first-step-of-a-profession-programmer/</link>
      <pubDate>Fri, 21 Jun 2019 12:06:20 +0900</pubDate>
      
      <guid>https://hirokimatsueda.github.io/post/the-first-step-of-a-profession-programmer/</guid>
      <description>10 歳からプログラミングやってます、と、プレゼン内で笑いを取ろうと喋ったら、喋りが下手すぎてリアクションがもらえず焦った松枝です。
仕事でプログラミングをするようになった新卒の人に対して伝えたいことがあります。今年の弊社の新卒の皆さんにはお伝えしたのですが、こちらのブログにも書いてみようと思います。
背景（読み飛ばし推奨） 前述の通り 10 歳からプログラミングを始め、高専専攻科を卒業するまでの約 12 年間、趣味または研究でプログラミングをやっていました。 当時はまだ Windows 98 SE とかの時代で、小中学校の同級生でプログラミングができる人は皆無で、高専に入ってようやくまともに会話できる人が数人いる、というような状態でした。
そんな状態の人が社会人になったので、自分の力はどこでも通用するんじゃね？という気持ちが半分、いやいや世の中にはもっとすごい人が必ずいるだろうついていけるかな？という気持ちが半分で、配属になりました。
そこで出会ったチームリーダーさんの技術に圧倒されました。 力試しで与えられた課題を解いてレビューして頂いた結果、自分のコードの汚さ、詰めの甘さに気づくことができました。同時に、とても恵まれた環境に配属されたのだとワクワクしてきました。
聞けばそのリーダーさんは当時 30 歳くらいで、プログラミングに初めて触れたのは大学生の頃ということでした。つまり、「プログラムを書く」というキャリア年数は私と同じくらいです。 しかし技術力は雲泥の差でした。私は間違ったものを積み重ねていたのだなという後悔の気持ちが襲ってきました。 若い人が同じような後悔を抱えずに過ごせるよう、仕事としてのプログラミングを始める人に最初に知ってほしい、いくつかのポイントを伝授します。
人が読みやすいコードを追求する  半年後には何をやっているか分からないコードにしない 変数名は分かりやすい単語を使う  できるだけ日本語のローマ字表記ではなく英語で書きましょう。   コーディング規約を遵守する、フォーマッタを活用する  if( a== b){ c++;} とか書いてあったら、私は(心の中で)キレます。   コメントを適宜書く。ただし書きすぎない  // a を b に代入する みたいなプログラムの説明は要りません。 そのコードで何をしたいのか伝わりにくい時にコメントを書いてください。 伝わりにくいときはきっとコードを見直したほうが良いです。   既存コードのフィーリングを尊重する  勝手にログ出力を端折ったりとかしないでください。せめてプルリクエスト上げるまでには戻して…   車輪の再開発を避ける  クイックソートとかを自分で作らずライブラリを活用しましょう。品質確保って大変ですよ？    自分の理解したコードを書く  ネット上の Stack Overflow や teratail などに記載しているコードをそのままコピペしない 友達に直接コードを書いてもらわない  参考にした、教えてもらった情報は何なのか、自分の知識に落とし込んでから、改めて今回のケースはどうすればよいのか考えて実装する。    まとめ 上記をまとめると、要は「美しいコードを書いてください」ということです。 音楽でいえば、例えばクラシックの音楽は何百年も昔に作られたにも関わらず、現代の私たちが聴いても良い曲だと感じますよね？</description>
    </item>
    
  </channel>
</rss>
