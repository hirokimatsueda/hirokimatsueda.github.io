<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング on 備忘録</title>
    <link>https://blog.pokapu.jp/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in プログラミング on 備忘録</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <copyright>Copyright © 2022 Hiroki Matsueda</copyright>
    <lastBuildDate>Fri, 21 Jun 2019 12:06:20 +0900</lastBuildDate>
    <atom:link href="https://blog.pokapu.jp/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>職業プログラマの第一歩を踏み出したあなたへ</title>
      <link>https://blog.pokapu.jp/post/the-first-step-of-a-profession-programmer/</link>
      <pubDate>Fri, 21 Jun 2019 12:06:20 +0900</pubDate>
      <guid>https://blog.pokapu.jp/post/the-first-step-of-a-profession-programmer/</guid>
      <description>&lt;p&gt;10 歳からプログラミングやってます、と、プレゼン内で笑いを取ろうと喋ったら、喋りが下手すぎてリアクションがもらえず焦った松枝です。&lt;/p&gt;&#xA;&lt;p&gt;仕事でプログラミングをするようになった新卒の人に対して伝えたいことがあります。今年の弊社の新卒の皆さんにはお伝えしたのですが、こちらのブログにも書いてみようと思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;背景読み飛ばし推奨&#34;&gt;背景（読み飛ばし推奨）&lt;/h2&gt;&#xA;&lt;p&gt;前述の通り 10 歳からプログラミングを始め、高専専攻科を卒業するまでの約 12 年間、趣味または研究でプログラミングをやっていました。&#xA;当時はまだ Windows 98 SE とかの時代で、小中学校の同級生でプログラミングができる人は皆無で、高専に入ってようやくまともに会話できる人が数人いる、というような状態でした。&lt;/p&gt;&#xA;&lt;p&gt;そんな状態の人が社会人になったので、自分の力はどこでも通用するんじゃね？という気持ちが半分、いやいや世の中にはもっとすごい人が必ずいるだろうついていけるかな？という気持ちが半分で、配属になりました。&lt;/p&gt;&#xA;&lt;p&gt;そこで出会ったチームリーダーさんの技術に圧倒されました。&#xA;力試しで与えられた課題を解いてレビューして頂いた結果、自分のコードの汚さ、詰めの甘さに気づくことができました。同時に、とても恵まれた環境に配属されたのだとワクワクしてきました。&lt;/p&gt;&#xA;&lt;p&gt;聞けばそのリーダーさんは当時 30 歳くらいで、プログラミングに初めて触れたのは大学生の頃ということでした。つまり、「プログラムを書く」というキャリア年数は私と同じくらいです。&#xA;しかし技術力は雲泥の差でした。私は間違ったものを積み重ねていたのだなという後悔の気持ちが襲ってきました。&#xA;若い人が同じような後悔を抱えずに過ごせるよう、仕事としてのプログラミングを始める人に最初に知ってほしい、いくつかのポイントを伝授します。&lt;/p&gt;&#xA;&lt;h2 id=&#34;人が読みやすいコードを追求する&#34;&gt;人が読みやすいコードを追求する&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;半年後には何をやっているか分からないコードにしない&lt;/li&gt;&#xA;&lt;li&gt;変数名は分かりやすい単語を使う&#xA;&lt;ul&gt;&#xA;&lt;li&gt;できるだけ日本語のローマ字表記ではなく英語で書きましょう。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;コーディング規約を遵守する、フォーマッタを活用する&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;if( a== b){ c++;}&lt;/code&gt; とか書いてあったら、私は(心の中で)キレます。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;コメントを適宜書く。ただし書きすぎない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;// a を b に代入する&lt;/code&gt; みたいなプログラムの説明は要りません。&lt;/li&gt;&#xA;&lt;li&gt;そのコードで何をしたいのか伝わりにくい時にコメントを書いてください。&lt;/li&gt;&#xA;&lt;li&gt;伝わりにくいときはきっとコードを見直したほうが良いです。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;既存コードのフィーリングを尊重する&#xA;&lt;ul&gt;&#xA;&lt;li&gt;勝手にログ出力を端折ったりとかしないでください。せめてプルリクエスト上げるまでには戻して…&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;車輪の再開発を避ける&#xA;&lt;ul&gt;&#xA;&lt;li&gt;クイックソートとかを自分で作らずライブラリを活用しましょう。品質確保って大変ですよ？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;自分の理解したコードを書く&#34;&gt;自分の理解したコードを書く&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ネット上の Stack Overflow や teratail などに記載しているコードをそのままコピペしない&lt;/li&gt;&#xA;&lt;li&gt;友達に直接コードを書いてもらわない&#xA;&lt;ul&gt;&#xA;&lt;li&gt;参考にした、教えてもらった情報は何なのか、自分の知識に落とし込んでから、改めて今回のケースはどうすればよいのか考えて実装する。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;&#xA;&lt;p&gt;上記をまとめると、要は「美しいコードを書いてください」ということです。&#xA;音楽でいえば、例えばクラシックの音楽は何百年も昔に作られたにも関わらず、現代の私たちが聴いても良い曲だと感じますよね？&lt;/p&gt;&#xA;&lt;p&gt;コードも同じように、美しいコードを書けば長く愛されます。&#xA;バグを見つけることが容易なのですぐ直せますし、機能追加もしやすいです。&lt;/p&gt;&#xA;&lt;p&gt;最初は大変ですが、そのうち無意識に書けるようになりますので頑張りましょう。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
